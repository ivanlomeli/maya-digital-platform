
===== BEGIN frontend/.DS_Store (binary, mime=application/octet-stream; charset=binary, base64) =====

===== END frontend/.DS_Store =====

===== BEGIN frontend/.gitignore =====
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

===== END frontend/.gitignore =====

===== BEGIN frontend/Dockerfile =====
# --- Stage 1: Build ---
# Usa Node.js v20 para compatibilidad con react-router
FROM node:20-alpine AS builder

# Establece el directorio de trabajo dentro del contenedor
WORKDIR /app

# Copia package.json y package-lock.json para instalar dependencias
COPY package*.json ./

# Instala las dependencias del proyecto
RUN npm install

# Copia el resto de los archivos del proyecto
COPY . .

# Construye la aplicación para producción
RUN npm run build

# --- Stage 2: Production ---
# Usa una imagen de Nginx para servir los archivos estáticos
FROM nginx:stable-alpine

# Copia los archivos construidos desde la etapa anterior al directorio de Nginx
COPY --from=builder /app/build /usr/share/nginx/html

# Expone el puerto 80 (Nginx escucha en este puerto por defecto)
EXPOSE 80

# Comando para iniciar el servidor Nginx
CMD ["nginx", "-g", "daemon off;"]

===== END frontend/Dockerfile =====

===== BEGIN frontend/README.md =====
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

===== END frontend/README.md =====

===== BEGIN frontend/package-lock.json (binary, mime=application/json; charset=us-ascii, base64) =====

===== END frontend/package-lock.json =====

===== BEGIN frontend/package.json (binary, mime=application/json; charset=us-ascii, base64) =====

===== END frontend/package.json =====

===== BEGIN frontend/postcss.config.js =====
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

===== END frontend/postcss.config.js =====

===== BEGIN frontend/public/favicon.ico (binary, mime=image/vnd.microsoft.icon; charset=binary, base64) =====

===== END frontend/public/favicon.ico =====

===== BEGIN frontend/public/index.html =====
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

===== END frontend/public/index.html =====

===== BEGIN frontend/public/logo192.png (binary, mime=image/png; charset=binary, base64) =====

===== END frontend/public/logo192.png =====

===== BEGIN frontend/public/logo512.png (binary, mime=image/png; charset=binary, base64) =====

===== END frontend/public/logo512.png =====

===== BEGIN frontend/public/manifest.json (binary, mime=application/json; charset=us-ascii, base64) =====

===== END frontend/public/manifest.json =====

===== BEGIN frontend/public/robots.txt =====
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

===== END frontend/public/robots.txt =====

===== BEGIN frontend/src/.DS_Store (binary, mime=application/octet-stream; charset=binary, base64) =====

===== END frontend/src/.DS_Store =====

===== BEGIN frontend/src/App.js =====
// frontend/src/App.js - VERSIÓN ACTUALIZADA CON RUTAS DE REGISTRO DE HOTELES

import { useState, useEffect } from 'react';
import { Routes, Route, Link } from 'react-router-dom';
import './index.css';

// Importar todos los componentes y páginas
import Modal from './components/Modal';
import IntroAnimation from './components/IntroAnimation';
import Header from './components/Header';
import HotelBookingForm from './components/HotelBookingForm';
import RestaurantMenu from './components/RestaurantMenu';
import CaballosBookingForm from './components/CaballosBookingForm';
import CenoteBookingForm from './components/CenoteBookingForm';
import TourBookingForm from './components/TourBookingForm';
import ProductDetailPage from './pages/ProductDetailPage';
import CartModal from './components/CartModal';
import TransporteModal from './components/TransporteModal';
import RegistrationModal from './components/RegistrationModal';
import HotelesPage from './pages/HotelesPage';
import RestaurantesPage from './pages/RestaurantesPage';
import ExperienciasPage from './pages/ExperienciasPage';
import ArtesanosPage from './pages/ArtesanosPage';
import TransportePage from './pages/TransportePage';
import MisReservasPage from './pages/MisReservasPage';
import PortalPage from './pages/PortalPage';
import AdminPage from './pages/AdminPage';
import CreateHotelPage from './pages/CreateHotelPage';
import EditHotelPage from './pages/EditHotelPage';

// NUEVAS IMPORTACIONES PARA EL SISTEMA DE REGISTRO DE HOTELES Y RESTAURANTES
import HotelLandingPage from './pages/HotelLandingPage';
import HotelRegistrationPage from './pages/HotelRegistrationPage';
import RestaurantLandingPage from './pages/RestaurantLandingPage';
import RestaurantRegistrationPage from './pages/RestaurantRegistrationPage';

function App() {
    const [introComplete, setIntroComplete] = useState(false);
    const [modalState, setModalState] = useState({ type: null, data: null });
    const [cart, setCart] = useState([]);
    const [isLoggedIn, setIsLoggedIn] = useState(false);
    const [userData, setUserData] = useState(null);
    const [pendingAction, setPendingAction] = useState(null);

    // ✅ VERIFICAR AUTENTICACIÓN AL CARGAR LA APP
    useEffect(() => {
        try {
            const token = localStorage.getItem('auth_token');
            const userDataString = localStorage.getItem('user_data');
            
            if (token && userDataString) {
                const parsedUserData = JSON.parse(userDataString);
                setIsLoggedIn(true);
                setUserData(parsedUserData);
                console.log('Usuario cargado desde localStorage:', parsedUserData);
            }
        } catch (error) {
            console.error('Error al cargar datos del usuario:', error);
            // Limpiar localStorage corrupto
            localStorage.removeItem('auth_token');
            localStorage.removeItem('user_data');
            setIsLoggedIn(false);
            setUserData(null);
        }
    }, []);

    const openModal = (type, data = null) => setModalState({ type, data });
    const closeModal = () => setModalState({ type: null, data: null });

    const handleAddToCart = (product) => {
        setCart(prevCart => {
            const existingItem = prevCart.find(item => item.id === product.id);
            if (existingItem) {
                return prevCart.map(item =>
                    item.id === product.id
                        ? { ...item, quantity: item.quantity + 1 }
                        : item
                );
            }
            return [...prevCart, { ...product, quantity: 1 }];
        });
    };

    const handleRemoveFromCart = (productId) => {
        setCart(prevCart => prevCart.filter(item => item.id !== productId));
    };

    const handleConfirmAction = (actionType, actionData) => {
        if (!isLoggedIn) {
            setPendingAction({ type: actionType, data: actionData });
            openModal('register');
            return;
        }

        // Procesar la acción basada en el tipo
        switch (actionType) {
            case 'hotel':
                console.log('Reserva de hotel confirmada:', actionData);
                closeModal();
                break;
            case 'restaurant':
                console.log('Reserva de restaurante confirmada:', actionData);
                closeModal();
                break;
            case 'experience':
                console.log('Reserva de experiencia confirmada:', actionData);
                closeModal();
                break;
            default:
                console.log('Acción confirmada:', actionType, actionData);
                closeModal();
        }
    };

    const handleRegistration = (newUserInfo) => {
        try {
            setIsLoggedIn(true);
            setUserData(newUserInfo.user);
            
            // Guardar en localStorage de forma segura
            localStorage.setItem('auth_token', newUserInfo.token);
            localStorage.setItem('user_data', JSON.stringify(newUserInfo.user));
            
            console.log('Usuario registrado:', newUserInfo.user);
            closeModal();
            
            // Ejecutar acción pendiente si existe
            if (pendingAction) {
                handleConfirmAction(pendingAction.type, pendingAction.data);
                setPendingAction(null);
            }
        } catch (error) {
            console.error('Error al guardar datos del usuario:', error);
        }
    };

    const handleLogin = (loginData) => {
        try {
            setIsLoggedIn(true);
            setUserData(loginData.user);
            
            // Guardar en localStorage de forma segura
            localStorage.setItem('auth_token', loginData.token);
            localStorage.setItem('user_data', JSON.stringify(loginData.user));
            
            console.log('Usuario logueado:', loginData.user);
            closeModal();
            
            // Ejecutar acción pendiente si existe
            if (pendingAction) {
                handleConfirmAction(pendingAction.type, pendingAction.data);
                setPendingAction(null);
            }
        } catch (error) {
            console.error('Error al guardar datos del usuario:', error);
        }
    };

    const handleLogout = () => {
        setIsLoggedIn(false);
        setUserData(null);
        localStorage.removeItem('auth_token');
        localStorage.removeItem('user_data');
        console.log('Usuario desconectado');
    };

    if (!introComplete) {
        return <IntroAnimation onAnimationComplete={() => setIntroComplete(true)} />;
    }

    return (
        <div className="antialiased">
            <Header 
                cartItemCount={cart.length}
                onCartClick={() => openModal('cart')}
                onLoginClick={() => openModal('register')}
                isLoggedIn={isLoggedIn}
                userData={userData}
                onLogout={handleLogout}
            />

            <main>
                <Routes>
                    {/* Rutas principales existentes */}
                    <Route path="/" element={<HotelesPage onReserveClick={(data) => openModal('hotel', data)} />} />
                    <Route path="/restaurantes" element={<RestaurantesPage onMenuClick={(data) => openModal('restaurant', data)} />} />
                    <Route path="/experiencias" element={<ExperienciasPage onExperienceClick={(data) => openModal('experience', data)} />} />
                    <Route path="/artesanos" element={<ArtesanosPage />} />
                    <Route path="/artesanos/:productId" element={<ProductDetailPage onAddToCart={handleAddToCart}/>} />
                    <Route path="/transporte" element={<TransportePage onSolicitarClick={() => openModal('transporte')} />} />
                    <Route path="/mis-reservas" element={<MisReservasPage />} />
                    
                    {/* Rutas del portal existentes */}
                    <Route path="/portal" element={<PortalPage userData={userData} isLoggedIn={isLoggedIn} />} />
                    <Route path="/portal/nuevo-hotel" element={<CreateHotelPage />} />
                    <Route path="/portal/editar-hotel/:hotelId" element={<EditHotelPage />} />
                    <Route path="/admin" element={<AdminPage />} />

                    {/* ✨ NUEVAS RUTAS PARA EL SISTEMA DE REGISTRO DE HOTELES Y RESTAURANTES */}
                    <Route path="/hoteles-unete" element={<HotelLandingPage />} />
                    <Route path="/registro-hotel" element={<HotelRegistrationPage />} />
                    <Route path="/restaurantes-unete" element={<RestaurantLandingPage />} />
                    <Route path="/registro-restaurante" element={<RestaurantRegistrationPage />} />
                </Routes>
            </main>

            <footer className="bg-gray-800 text-white py-10">
                <div className="container mx-auto px-6">
                    <div className="grid md:grid-cols-4 gap-8">
                        <div>
                            <h3 className="text-xl font-bold mb-4">Maya Digital</h3>
                            <p className="text-gray-300">Tu puerta al mundo maya. Descubre, explora y vive experiencias únicas.</p>
                        </div>
                        <div>
                            <h4 className="font-bold mb-4">Servicios</h4>
                            <ul className="space-y-2 text-gray-300">
                                <li><Link to="/" className="hover:text-white">Hoteles</Link></li>
                                <li><Link to="/restaurantes" className="hover:text-white">Restaurantes</Link></li>
                                <li><Link to="/experiencias" className="hover:text-white">Experiencias</Link></li>
                                <li><Link to="/artesanos" className="hover:text-white">Artesanos</Link></li>
                            </ul>
                        </div>
                        {/* ✨ NUEVA SECCIÓN PARA HOTELES Y RESTAURANTES */}
                        <div>
                            <h4 className="font-bold mb-4">Para Negocios</h4>
                            <ul className="space-y-2 text-gray-300">
                                <li><Link to="/hoteles-unete" className="hover:text-white">Registrar Hotel</Link></li>
                                <li><Link to="/restaurantes-unete" className="hover:text-white">Registrar Restaurante</Link></li>
                                <li><a href="mailto:partners@mayadigital.com" className="hover:text-white">Contacto Partners</a></li>
                            </ul>
                        </div>
                        <div>
                            <h4 className="font-bold mb-4">Contacto</h4>
                            <p className="text-gray-300">Email: info@mayadigital.com</p>
                            <p className="text-gray-300">Teléfono: +52 999 123 4567</p>
                            <div className="flex space-x-4 mt-4">
                                <a href="#" className="text-gray-300 hover:text-white">Facebook</a>
                                <a href="#" className="text-gray-300 hover:text-white">Instagram</a>
                                <a href="#" className="text-gray-300 hover:text-white">Twitter</a>
                            </div>
                        </div>
                    </div>
                    <div className="border-t border-gray-700 mt-8 pt-8 text-center text-gray-400">
                        <p>&copy; 2024 Maya Digital. Todos los derechos reservados.</p>
                    </div>
                </div>
            </footer>

            <Modal isOpen={!!modalState.type} onClose={closeModal}>
                {modalState.type === 'hotel' && (
                    <HotelBookingForm 
                        hotel={modalState.data} 
                        onConfirm={handleConfirmAction} 
                    />
                )}
                {modalState.type === 'restaurant' && (
                    <RestaurantMenu 
                        restaurant={modalState.data} 
                        onConfirm={handleConfirmAction} 
                    />
                )}
                {modalState.type === 'cart' && (
                    <CartModal 
                        cartItems={cart} 
                        onRemoveItem={handleRemoveFromCart} 
                    />
                )}
                {modalState.type === 'transporte' && <TransporteModal />}
                {modalState.type === 'register' && (
                    <RegistrationModal 
                        onRegister={handleRegistration}
                        onLogin={handleLogin}
                    />
                )}
                {modalState.type === 'experience' && (
                    <>
                        {modalState.data?.type === 'caballos' && (
                            <CaballosBookingForm 
                                experience={modalState.data} 
                                onConfirm={handleConfirmAction} 
                            />
                        )}
                        {modalState.data?.type === 'cenote' && (
                            <CenoteBookingForm 
                                experience={modalState.data} 
                                onConfirm={handleConfirmAction} 
                            />
                        )}
                        {modalState.data?.type === 'tour' && (
                            <TourBookingForm 
                                experience={modalState.data} 
                                onConfirm={handleConfirmAction} 
                            />
                        )}
                    </>
                )}
            </Modal>
        </div>
    );
}

export default App;
===== END frontend/src/App.js =====

===== BEGIN frontend/src/App.test.js =====
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

===== END frontend/src/App.test.js =====

===== BEGIN frontend/src/assets/Imagotipo-Maya-Digital-2022.png (binary, mime=image/png; charset=binary, base64) =====

===== END frontend/src/assets/Imagotipo-Maya-Digital-2022.png =====

===== BEGIN frontend/src/assets/aretes-1.jpg (binary, mime=image/webp; charset=binary, base64) =====

===== END frontend/src/assets/aretes-1.jpg =====

===== BEGIN frontend/src/assets/hero-background.jpg (binary, mime=image/jpeg; charset=binary, base64) =====

===== END frontend/src/assets/hero-background.jpg =====

===== BEGIN frontend/src/assets/huipil-1.jpg (binary, mime=image/png; charset=binary, base64) =====

===== END frontend/src/assets/huipil-1.jpg =====

===== BEGIN frontend/src/assets/huipil-2.jpg (binary, mime=image/webp; charset=binary, base64) =====

===== END frontend/src/assets/huipil-2.jpg =====

===== BEGIN frontend/src/assets/huipil-3.jpg (binary, mime=image/webp; charset=binary, base64) =====

===== END frontend/src/assets/huipil-3.jpg =====

===== BEGIN frontend/src/assets/vasija-1.jpg (binary, mime=image/jpeg; charset=binary, base64) =====

===== END frontend/src/assets/vasija-1.jpg =====

===== BEGIN frontend/src/assets/vasija-2.jpg (binary, mime=image/jpeg; charset=binary, base64) =====

===== END frontend/src/assets/vasija-2.jpg =====

===== BEGIN frontend/src/components/CaballosBookingForm.js =====
// src/components/CaballosBookingForm.js

import { useState, useEffect } from 'react';

export default function CaballosBookingForm({ experience }) {
    const [jinetes, setJinetes] = useState(1);
    const [total, setTotal] = useState(experience.price);

    useEffect(() => {
        setTotal(jinetes * experience.price);
    }, [jinetes, experience.price]);

    const handleSubmit = (e) => {
        e.preventDefault();
        alert(`Reserva para ${experience.name} para ${jinetes} persona(s) por $${total.toFixed(2)} MXN confirmada (simulación).`);
    };

    return (
        <div>
            <h2 className="text-3xl font-bold mb-4">Reserva tu {experience.name}</h2>
            <form onSubmit={handleSubmit}>
                <div className="mb-4">
                    <label className="block text-gray-700 font-semibold">Elige tu Caballo</label>
                    <select className="w-full p-2 border rounded-lg mt-1">
                        <option>Relámpago (dócil)</option>
                        <option>Furia (experimentado)</option>
                    </select>
                </div>
                <div className="mb-4">
                    <label className="block text-gray-700 font-semibold">Jinetes</label>
                    <input type="number" value={jinetes} onChange={(e) => setJinetes(e.target.value)} min="1" className="w-full p-2 border rounded-lg mt-1" />
                </div>
                <div className="p-4 bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 mb-4">
                    <p className="font-bold">Requisitos:</p>
                    <ul className="list-disc list-inside text-sm">
                        <li>Edad mínima: 12 años</li>
                        <li>Peso máximo: 100 kg</li>
                    </ul>
                </div>
                <div className="mt-6 bg-gray-100 p-4 rounded-lg text-right">
                    <div className="font-bold text-2xl">Total: ${total.toFixed(2)} MXN</div>
                </div>
                <button type="submit" className="btn-primary w-full font-bold py-3 px-4 rounded-full mt-4">Reservar Paseo</button>
            </form>
        </div>
    );
}
===== END frontend/src/components/CaballosBookingForm.js =====

===== BEGIN frontend/src/components/CartModal.js =====
// src/components/CartModal.js

export default function CartModal({ cartItems, onRemoveItem }) {
    const total = cartItems.reduce((sum, item) => sum + item.price, 0);

    const handleCheckout = () => {
        alert('Procediendo al pago (simulación)...');
    };

    return (
        <div>
            <h3 className="text-2xl font-bold mb-4">Mi Carrito de Compras</h3>
            <div className="space-y-4">
                {cartItems.length === 0 ? (
                    <p className="text-gray-500">Tu carrito está vacío.</p>
                ) : (
                    cartItems.map((item, index) => (
                        <div key={index} className="flex justify-between items-center border-b pb-2">
                            <div>
                                <h4 className="font-bold">{item.name}</h4>
                                <p className="text-sm text-gray-500">${item.price}</p>
                            </div>
                            <button onClick={() => onRemoveItem(item.id)} className="text-red-500 hover:text-red-700 font-bold">
                                Quitar
                            </button>
                        </div>
                    ))
                )}
            </div>
            <div className="mt-6 pt-4 border-t-2 border-dashed text-right">
                <span className="text-2xl font-bold">Total: </span>
                <span className="text-2xl font-bold" style={{ color: 'var(--theme-primary)' }}>
                    ${total.toFixed(2)} MXN
                </span>
            </div>
            <button 
                onClick={handleCheckout} 
                disabled={cartItems.length === 0}
                className="btn-secondary w-full font-bold py-3 px-4 rounded-full mt-6 disabled:bg-gray-400 disabled:shadow-none disabled:cursor-not-allowed"
            >
                Proceder al Pago
            </button>
        </div>
    );
}
===== END frontend/src/components/CartModal.js =====

===== BEGIN frontend/src/components/CenoteBookingForm.js =====
// src/components/CenoteBookingForm.js

import { useState, useEffect } from 'react';

const ticketTypes = [
    { name: 'Acceso General', price: 450 },
    { name: 'Acceso con Snorkel', price: 650 }
];

export default function CenoteBookingForm({ experience }) {
    const [personas, setPersonas] = useState(1);
    const [ticketType, setTicketType] = useState(ticketTypes[0]);
    const [total, setTotal] = useState(ticketTypes[0].price);

    useEffect(() => {
        setTotal(personas * ticketType.price);
    }, [personas, ticketType]);

    const handleTypeChange = (e) => {
        const selectedType = ticketTypes.find(t => t.price == e.target.value);
        setTicketType(selectedType);
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        alert(`Entradas para ${experience.name} (${ticketType.name}) para ${personas} persona(s) por $${total.toFixed(2)} MXN confirmadas (simulación).`);
    };

    return (
        <div>
            <h2 className="text-3xl font-bold mb-4">Entradas para {experience.name}</h2>
            <form onSubmit={handleSubmit}>
                <div className="mb-4">
                    <label className="block text-gray-700 font-semibold">Personas</label>
                    <input type="number" value={personas} onChange={(e) => setPersonas(e.target.value)} min="1" className="w-full p-2 border rounded-lg mt-1" />
                </div>
                <div className="mb-4">
                    <label className="block text-gray-700 font-semibold">Tipo de Entrada</label>
                    <select onChange={handleTypeChange} className="w-full p-2 border rounded-lg mt-1">
                        {ticketTypes.map(type => (
                            <option key={type.name} value={type.price}>{type.name} (${type.price})</option>
                        ))}
                    </select>
                </div>
                <div className="mt-6 bg-gray-100 p-4 rounded-lg text-right">
                    <div className="font-bold text-2xl">Total: ${total.toFixed(2)} MXN</div>
                </div>
                <button type="submit" className="btn-primary w-full font-bold py-3 px-4 rounded-full mt-4">Comprar Entradas</button>
            </form>
        </div>
    );
}
===== END frontend/src/components/CenoteBookingForm.js =====

===== BEGIN frontend/src/components/Header.js =====
// frontend/src/components/Header.js - VERSIÓN ACTUALIZADA
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import logo from '../assets/Imagotipo-Maya-Digital-2022.png';

function Header({ cartItemCount, onCartClick, onLoginClick, isLoggedIn, userData, onLogout }) {
    const [isMenuOpen, setIsMenuOpen] = useState(false);
    const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);
    const navigate = useNavigate();

    const handleLogout = () => {
        onLogout();
        setIsUserMenuOpen(false);
        navigate('/');
    };

    const goToAdmin = () => {
        navigate('/admin');
        setIsUserMenuOpen(false);
    };

    return (
        <header className="bg-white shadow-md sticky top-0 z-50">
            <div className="container mx-auto px-4 sm:px-6 lg:px-8">
                <div className="flex justify-between items-center py-4">
                    {/* Logo */}
                    <Link to="/" className="flex items-center space-x-2">
                        <img src={logo} alt="Maya Digital" className="h-10 w-auto" />
                    </Link>

                    {/* Desktop Navigation */}
                    <nav className="hidden md:flex items-center space-x-6">
                        <Link 
                            to="/" 
                            className="text-gray-700 hover:text-blue-600 font-medium transition-colors"
                        >
                            Hoteles
                        </Link>
                        <Link 
                            to="/restaurantes" 
                            className="text-gray-700 hover:text-blue-600 font-medium transition-colors"
                        >
                            Restaurantes
                        </Link>
                        <Link 
                            to="/experiencias" 
                            className="text-gray-700 hover:text-blue-600 font-medium transition-colors"
                        >
                            Experiencias
                        </Link>
                        <Link 
                            to="/artesanos" 
                            className="text-gray-700 hover:text-blue-600 font-medium transition-colors"
                        >
                            Artesanos
                        </Link>
                        <Link 
                            to="/transporte" 
                            className="text-gray-700 hover:text-blue-600 font-medium transition-colors"
                        >
                            Transporte
                        </Link>
                        
                        {/* ✨ NUEVOS ENLACES PARA HOTELES Y RESTAURANTES */}
                        <div className="h-6 w-px bg-gray-300"></div> {/* Separador visual */}
                        <div className="flex items-center space-x-2">
                            <Link 
                                to="/hoteles-unete" 
                                className="bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-3 py-2 rounded-full font-bold text-sm hover:from-blue-600 hover:to-indigo-700 transition-all transform hover:scale-105 shadow-lg"
                            >
                                🏨 Hoteles
                            </Link>
                            <Link 
                                to="/restaurantes-unete" 
                                className="bg-gradient-to-r from-red-500 to-orange-600 text-white px-3 py-2 rounded-full font-bold text-sm hover:from-red-600 hover:to-orange-700 transition-all transform hover:scale-105 shadow-lg"
                            >
                                🍽️ Restaurantes
                            </Link>
                        </div>
                    </nav>

                    {/* Right side - Cart and User */}
                    <div className="flex items-center space-x-4">
                        {/* Cart Button */}
                        <button
                            onClick={onCartClick}
                            className="relative p-2 text-gray-700 hover:text-blue-600 transition-colors"
                        >
                            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-1.8 8.2M7 13l2.2-2.2M19 13v6a2 2 0 01-2 2H7a2 2 0 01-2-2v-6" />
                            </svg>
                            {cartItemCount > 0 && (
                                <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                                    {cartItemCount}
                                </span>
                            )}
                        </button>

                        {/* User Menu */}
                        {isLoggedIn && userData ? (
                            <div className="relative">
                                <button
                                    onClick={() => setIsUserMenuOpen(!isUserMenuOpen)}
                                    className="flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-full hover:bg-blue-700 transition-colors"
                                >
                                    <div className="w-8 h-8 bg-white text-blue-600 rounded-full flex items-center justify-center font-bold">
                                        {userData.first_name ? userData.first_name.charAt(0).toUpperCase() : 'U'}
                                    </div>
                                    <span className="hidden sm:block font-medium">
                                        {userData.first_name || 'Usuario'}
                                    </span>
                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                                    </svg>
                                </button>

                                {/* Dropdown Menu */}
                                {isUserMenuOpen && (
                                    <div className="absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
                                        {/* User Info */}
                                        <div className="px-4 py-3 border-b border-gray-200">
                                            <p className="text-sm font-medium text-gray-900">
                                                {userData.first_name} {userData.last_name}
                                            </p>
                                            <p className="text-sm text-gray-500">{userData.email}</p>
                                            <p className="text-xs text-blue-600 mt-1">
                                                {userData.role === 'Admin' ? 'Administrador' : 
                                                userData.role === 'HotelOwner' ? 'Dueño de Hotel' :
                                                userData.role === 'BusinessOwner' ? 'Dueño de Restaurante' : 'Cliente'}
                                            </p>
                                        </div>

                                        {/* Menu Items */}
                                        <div className="py-2">
                                            <Link
                                                to="/mis-reservas"
                                                className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
                                                onClick={() => setIsUserMenuOpen(false)}
                                            >
                                                <svg className="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                                                </svg>
                                                Mis Reservas
                                            </Link>

                                            {/* Portal para Hotel Owners */}
                                            {userData.role === 'HotelOwner' && (
                                                <Link
                                                    to="/portal"
                                                    className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
                                                    onClick={() => setIsUserMenuOpen(false)}
                                                >
                                                    <svg className="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                                                    </svg>
                                                    Portal de Hoteles
                                                </Link>
                                            )}

                                            {/* Portal para Business Owners (Restaurantes) */}
                                            {userData.role === 'BusinessOwner' && (
                                                <Link
                                                    to="/portal"
                                                    className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
                                                    onClick={() => setIsUserMenuOpen(false)}
                                                >
                                                    <svg className="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                                                    </svg>
                                                    Portal de Restaurantes
                                                </Link>
                                            )}




                                            {/* Panel Admin - SOLO para administradores */}
                                            {userData.role === 'Admin' && (
                                                <button
                                                    onClick={goToAdmin}
                                                    className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
                                                >
                                                    <svg className="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                                    </svg>
                                                    Panel de Administración
                                                </button>
                                            )}

                                            <div className="border-t border-gray-200 mt-2 pt-2">
                                                <button
                                                    onClick={handleLogout}
                                                    className="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors"
                                                >
                                                    <svg className="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                                                    </svg>
                                                    Cerrar Sesión
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                )}
                            </div>
                        ) : (
                            // Login Button
                            <button
                                onClick={onLoginClick}
                                className="bg-blue-600 text-white px-6 py-2 rounded-full hover:bg-blue-700 transition-colors font-medium"
                            >
                                Iniciar Sesión
                            </button>
                        )}

                        {/* Mobile Menu Button */}
                        <button
                            onClick={() => setIsMenuOpen(!isMenuOpen)}
                            className="md:hidden p-2 text-gray-700 hover:text-blue-600 transition-colors"
                        >
                            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d={isMenuOpen ? "M6 18L18 6M6 6l12 12" : "M4 6h16M4 12h16M4 18h16"} />
                            </svg>
                        </button>
                    </div>
                </div>

                {/* Mobile Navigation */}
                {isMenuOpen && (
                    <div className="md:hidden border-t border-gray-200 py-4">
                        <nav className="flex flex-col space-y-3">
                            <Link 
                                to="/" 
                                className="text-gray-700 hover:text-blue-600 font-medium transition-colors"
                                onClick={() => setIsMenuOpen(false)}
                            >
                                Hoteles
                            </Link>
                            <Link 
                                to="/restaurantes" 
                                className="text-gray-700 hover:text-blue-600 font-medium transition-colors"
                                onClick={() => setIsMenuOpen(false)}
                            >
                                Restaurantes
                            </Link>
                            <Link 
                                to="/experiencias" 
                                className="text-gray-700 hover:text-blue-600 font-medium transition-colors"
                                onClick={() => setIsMenuOpen(false)}
                            >
                                Experiencias
                            </Link>
                            <Link 
                                to="/artesanos" 
                                className="text-gray-700 hover:text-blue-600 font-medium transition-colors"
                                onClick={() => setIsMenuOpen(false)}
                            >
                                Artesanos
                            </Link>
                            <Link 
                                to="/transporte" 
                                className="text-gray-700 hover:text-blue-600 font-medium transition-colors"
                                onClick={() => setIsMenuOpen(false)}
                            >
                                Transporte
                            </Link>
                            
                            {/* ✨ ENLACES PARA HOTELES Y RESTAURANTES EN MÓVIL */}
                            <div className="pt-3 border-t border-gray-200 space-y-3">
                                <Link 
                                    to="/hoteles-unete" 
                                    className="block bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-4 py-3 rounded-lg font-bold text-center hover:from-blue-600 hover:to-indigo-700 transition-all"
                                    onClick={() => setIsMenuOpen(false)}
                                >
                                    🏨 Registrar Hotel
                                </Link>
                                <Link 
                                    to="/restaurantes-unete" 
                                    className="block bg-gradient-to-r from-red-500 to-orange-600 text-white px-4 py-3 rounded-lg font-bold text-center hover:from-red-600 hover:to-orange-700 transition-all"
                                    onClick={() => setIsMenuOpen(false)}
                                >
                                    🍽️ Registrar Restaurante
                                </Link>
                            </div>
                            
                            {/* Admin option for mobile */}
                            {isLoggedIn && userData && userData.role === 'Admin' && (
                                <button
                                    onClick={() => {
                                        goToAdmin();
                                        setIsMenuOpen(false);
                                    }}
                                    className="text-left text-blue-600 hover:text-blue-800 font-medium transition-colors"
                                >
                                    🔧 Panel de Administración
                                </button>
                            )}
                        </nav>
                    </div>
                )}
            </div>
        </header>
    );
}

export default Header;
===== END frontend/src/components/Header.js =====

===== BEGIN frontend/src/components/HotelBookingForm.js =====
// src/components/HotelBookingForm.js

import { useState, useEffect } from 'react';

const hotelAddonsData = [
    { name: 'Tour Romántico', price: 1500, icon: '💖' },
    { name: 'Paquete Luna de Miel', price: 3500, icon: '🥂' },
    { name: 'Acceso a Spa', price: 800, icon: '💆‍♀️' }
];

export default function HotelBookingForm({ hotel, onConfirm }) {
    const [checkinDate, setCheckinDate] = useState('');
    const [checkoutDate, setCheckoutDate] = useState('');
    const [guests, setGuests] = useState(2);
    const [rooms, setRooms] = useState(1);
    const [selectedAddons, setSelectedAddons] = useState([]);
    const [specialRequests, setSpecialRequests] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);
    
    // --- ESTADO PARA EL DESGLOSE ---
    const [itinerary, setItinerary] = useState([]);
    const [total, setTotal] = useState(0);

    // Calcular itinerario y total
    useEffect(() => {
        const newItinerary = [];
        let newTotal = 0;

        // Calcular noches y precio base
        if (checkinDate && checkoutDate) {
            const date1 = new Date(checkinDate);
            const date2 = new Date(checkoutDate);
            if (date2 > date1) {
                const timeDiff = date2.getTime() - date1.getTime();
                const nights = Math.ceil(timeDiff / (1000 * 3600 * 24));
                
                for (let i = 0; i < nights; i++) {
                    newItinerary.push({ 
                        description: `Noche ${i + 1} (${rooms} habitación${rooms > 1 ? 'es' : ''})`, 
                        price: hotel.price * rooms 
                    });
                    newTotal += hotel.price * rooms;
                }
            }
        }

        // Agregar extras
        selectedAddons.forEach(addon => {
            newItinerary.push({ description: addon.name, price: addon.price });
            newTotal += addon.price;
        });
        
        setItinerary(newItinerary);
        setTotal(newTotal);
    }, [checkinDate, checkoutDate, rooms, selectedAddons, hotel.price]);

    const handleAddonToggle = (addon) => {
        setSelectedAddons(prevAddons => 
            prevAddons.find(a => a.name === addon.name)
                ? prevAddons.filter(a => a.name !== addon.name)
                : [...prevAddons, addon]
        );
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);

        // Validaciones básicas
        if (!checkinDate || !checkoutDate) {
            alert('Por favor selecciona las fechas de entrada y salida');
            setIsSubmitting(false);
            return;
        }

        if (new Date(checkoutDate) <= new Date(checkinDate)) {
            alert('La fecha de salida debe ser posterior a la fecha de entrada');
            setIsSubmitting(false);
            return;
        }

        // Preparar datos para el backend
        const bookingData = {
            hotel_id: hotel.id,
            check_in: checkinDate,
            check_out: checkoutDate,
            guests: parseInt(guests),
            rooms: parseInt(rooms),
            special_requests: specialRequests.trim() || null,
            addon_services: selectedAddons.length > 0 ? selectedAddons : null
        };

        try {
            // Verificar si hay token (usuario autenticado)
            const token = localStorage.getItem('auth_token');
            if (!token) {
                alert('Debes iniciar sesión para hacer una reserva');
                setIsSubmitting(false);
                return;
            }

            console.log('Enviando reserva:', bookingData);

            // --- ÚNICO CAMBIO REQUERIDO AQUÍ ---
            // Se elimina 'http://127.0.0.1:8080' para usar la ruta correcta en el servidor.
            const response = await fetch('/api/bookings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(bookingData)
            });

            const result = await response.json();
            console.log('Respuesta del servidor:', result);

            if (response.ok) {
                // Reserva exitosa
                alert(`¡Reserva confirmada! 🎉

Hotel: ${result.booking.hotel_name}
Referencia: ${result.booking.reference}
Check-in: ${result.booking.check_in}
Check-out: ${result.booking.check_out}
Total: $${result.booking.total_price.toFixed(2)} MXN

Estado: ${result.booking.status}

¡Te enviaremos un email con los detalles!`);
                
                // Cerrar modal y actualizar la aplicación
                onConfirm('hotel', result.booking);
            } else {
                // Error del servidor
                console.error('Error del servidor:', result);
                alert(`Error al crear la reserva: ${result.error || 'Error desconocido'}`);
            }
        } catch (error) {
            console.error('Error de conexión:', error);
            alert('Error de conexión con el servidor. Por favor intenta nuevamente.');
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <div>
            <h2 className="text-3xl font-bold mb-4">Reservar en {hotel.name}</h2>
            <form onSubmit={handleSubmit}>
                <div className="grid md:grid-cols-2 gap-8">
                    {/* Columna Izquierda: Opciones */}
                    <div>
                        <div className="grid grid-cols-2 gap-4 mb-4">
                            <div>
                                <label className="block text-gray-700 font-semibold">Entrada</label>
                                <input 
                                    type="date" 
                                    className="w-full p-2 border rounded-lg mt-1" 
                                    value={checkinDate} 
                                    onChange={(e) => setCheckinDate(e.target.value)}
                                    min={new Date().toISOString().split('T')[0]}
                                    required 
                                />
                            </div>
                            <div>
                                <label className="block text-gray-700 font-semibold">Salida</label>
                                <input 
                                    type="date" 
                                    className="w-full p-2 border rounded-lg mt-1" 
                                    value={checkoutDate} 
                                    onChange={(e) => setCheckoutDate(e.target.value)}
                                    min={checkinDate || new Date().toISOString().split('T')[0]}
                                    required 
                                />
                            </div>
                        </div>
                        
                        <div className="grid grid-cols-2 gap-4 mb-4">
                            <div>
                                <label className="block text-gray-700 font-semibold">Huéspedes</label>
                                <input 
                                    type="number" 
                                    className="w-full p-2 border rounded-lg mt-1" 
                                    value={guests} 
                                    onChange={(e) => setGuests(e.target.value)}
                                    min="1"
                                    max="10"
                                    required 
                                />
                            </div>
                            <div>
                                <label className="block text-gray-700 font-semibold">Habitaciones</label>
                                <input 
                                    type="number" 
                                    className="w-full p-2 border rounded-lg mt-1" 
                                    value={rooms} 
                                    onChange={(e) => setRooms(e.target.value)}
                                    min="1"
                                    max="5"
                                    required 
                                />
                            </div>
                        </div>

                        <div className="mb-4">
                            <label className="block text-gray-700 font-semibold">Solicitudes Especiales</label>
                            <textarea 
                                className="w-full p-2 border rounded-lg mt-1" 
                                value={specialRequests} 
                                onChange={(e) => setSpecialRequests(e.target.value)}
                                placeholder="Cama extra, vista al mar, etc."
                                rows="3"
                            />
                        </div>
                        
                        <hr className="my-4" />
                        
                        <div>
                            <h4 className="font-bold text-lg mb-2">Mejora tu Estancia</h4>
                            <div className="space-y-3">
                                {hotelAddonsData.map(addon => (
                                    <div key={addon.name} className="flex justify-between items-center p-2 rounded-lg hover:bg-gray-100">
                                        <div>
                                            <span className="font-bold">{addon.icon} {addon.name}</span>
                                            <span className="text-sm text-gray-500"> +${addon.price}</span>
                                        </div>
                                        <button 
                                            type="button" 
                                            onClick={() => handleAddonToggle(addon)} 
                                            className={`${selectedAddons.find(a => a.name === addon.name) 
                                                ? 'bg-red-500 hover:bg-red-600' 
                                                : 'btn-primary'
                                            } text-white text-xs font-bold py-1 px-3 rounded-full transition-colors`}
                                        >
                                            {selectedAddons.find(a => a.name === addon.name) ? 'Quitar' : 'Añadir'}
                                        </button>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                    
                    {/* Columna Derecha: Resumen */}
                    <div className="bg-gray-50 p-4 rounded-lg">
                         <h4 className="font-bold text-lg mb-2">Resumen de tu Estancia</h4>
                         
                         <div className="space-y-2 text-sm border-b pb-2 mb-2">
                            {itinerary.length > 0 ? (
                                itinerary.map((item, index) => (
                                    <div key={index} className="flex justify-between">
                                        <span>{item.description}</span>
                                        <span>${item.price.toFixed(2)}</span>
                                    </div>
                                ))
                            ) : (
                                <p className="text-gray-500">Selecciona tus fechas y extras.</p>
                            )}
                         </div>

                         <div className="font-bold text-xl text-right">
                             Total: ${total.toFixed(2)} MXN
                         </div>
                    </div>
                </div>
                
                <button 
                    type="submit" 
                    disabled={isSubmitting || total === 0}
                    className={`w-full font-bold py-3 px-4 rounded-full mt-6 transition-colors ${
                        isSubmitting || total === 0
                            ? 'bg-gray-400 cursor-not-allowed'
                            : 'btn-primary hover:bg-blue-600'
                    }`}
                >
                    {isSubmitting ? 'Procesando reserva...' : 'Confirmar Reserva'}
                </button>
            </form>
        </div>
    );
}
===== END frontend/src/components/HotelBookingForm.js =====

===== BEGIN frontend/src/components/HotelOwnerBanner.js =====
// frontend/src/components/HotelOwnerBanner.js

import React, { useState } from 'react';
import { Link } from 'react-router-dom';

export default function HotelOwnerBanner() {
    const [isVisible, setIsVisible] = useState(true);

    if (!isVisible) return null;

    return (
        <div className="bg-gradient-to-r from-emerald-500 via-blue-600 to-purple-600 text-white py-6 relative overflow-hidden">
            {/* Elementos decorativos de fondo */}
            <div className="absolute inset-0 opacity-20">
                <div className="absolute top-0 left-0 w-40 h-40 bg-white rounded-full -translate-x-20 -translate-y-20"></div>
                <div className="absolute bottom-0 right-0 w-60 h-60 bg-white rounded-full translate-x-20 translate-y-20"></div>
            </div>
            
            <div className="container mx-auto px-6 relative z-10">
                <div className="flex flex-col lg:flex-row items-center justify-between gap-6">
                    
                    {/* Contenido principal */}
                    <div className="flex-1 text-center lg:text-left">
                        <div className="flex items-center justify-center lg:justify-start mb-2">
                            <span className="text-3xl mr-3">🏨</span>
                            <h2 className="text-2xl lg:text-3xl font-bold">
                                ¿Tienes un hotel o propiedad?
                            </h2>
                        </div>
                        <p className="text-lg lg:text-xl text-blue-100 mb-4 lg:mb-0">
                            Únete a Maya Digital y llega a miles de viajeros • 
                            <span className="font-semibold text-yellow-300"> Sin costo inicial</span> • 
                            Solo pagas cuando recibes reservas
                        </p>
                        
                        {/* Beneficios rápidos */}
                        <div className="hidden lg:flex items-center space-x-6 mt-3 text-sm">
                            <div className="flex items-center">
                                <span className="text-green-300 mr-1">✓</span>
                                <span>+40% más reservas</span>
                            </div>
                            <div className="flex items-center">
                                <span className="text-green-300 mr-1">✓</span>
                                <span>Gestión fácil</span>
                            </div>
                            <div className="flex items-center">
                                <span className="text-green-300 mr-1">✓</span>
                                <span>Soporte 24/7</span>
                            </div>
                        </div>
                    </div>

                    {/* Botones de acción */}
                    <div className="flex flex-col sm:flex-row gap-3 min-w-fit">
                        <Link 
                            to="/registro-hotel"
                            className="bg-yellow-400 text-blue-900 px-6 py-3 rounded-lg font-bold text-lg hover:bg-yellow-300 transition transform hover:scale-105 shadow-lg text-center"
                        >
                            🚀 Registrar Gratis
                        </Link>
                        <Link 
                            to="/hoteles-unete"
                            className="border-2 border-white text-white px-6 py-3 rounded-lg font-bold text-lg hover:bg-white hover:text-blue-900 transition text-center"
                        >
                            📖 Más Info
                        </Link>
                    </div>

                    {/* Botón para cerrar */}
                    <button
                        onClick={() => setIsVisible(false)}
                        className="absolute top-2 right-2 lg:relative lg:top-auto lg:right-auto text-white hover:text-gray-300 text-xl font-bold w-8 h-8 flex items-center justify-center rounded-full hover:bg-white/20 transition"
                        aria-label="Cerrar banner"
                    >
                        ×
                    </button>
                </div>
            </div>
        </div>
    );
}
===== END frontend/src/components/HotelOwnerBanner.js =====

===== BEGIN frontend/src/components/IntroAnimation.js =====
// src/components/IntroAnimation.js

import { useEffect, useRef } from 'react';
import { Canvas, useFrame } from '@react-three/fiber';
import { Points, PointMaterial } from '@react-three/drei';
import * as THREE from 'three';

function Galaxy() {
  const ref = useRef();
  const numPoints = 150000;
  const radius = 8;

  // Genera las posiciones de las estrellas
  const positions = new Float32Array(numPoints * 3);
  for (let i = 0; i < numPoints; i++) {
    const r = Math.random() * radius;
    const theta = Math.random() * 2 * Math.PI;
    const phi = Math.acos(2 * Math.random() - 1);

    positions[i * 3] = r * Math.sin(phi) * Math.cos(theta);
    positions[i * 3 + 1] = r * Math.sin(phi) * Math.sin(theta);
    positions[i * 3 + 2] = r * Math.cos(phi);
  }

  // Anima la galaxia en cada frame
  useFrame((state, delta) => {
    ref.current.rotation.y += delta * 0.1;
  });

  return (
    <Points ref={ref} positions={positions} stride={3} frustumCulled={false}>
      <PointMaterial
        transparent
        color="#ec008c"
        size={0.02}
        sizeAttenuation={true}
        depthWrite={false}
      />
    </Points>
  );
}

export default function IntroAnimation({ onAnimationComplete }) {
  const wrapperRef = useRef();

  useEffect(() => {
    // Simula el final de la animación después de unos segundos
    const timer = setTimeout(() => {
      if (wrapperRef.current) {
        wrapperRef.current.style.transition = 'opacity 1s ease-out';
        wrapperRef.current.style.opacity = 0;
        wrapperRef.current.ontransitionend = onAnimationComplete;
      }
    }, 4000); // Duración de la intro

    return () => clearTimeout(timer);
  }, [onAnimationComplete]);

  return (
    <div ref={wrapperRef} className="fixed inset-0 bg-black z-50">
      <Canvas camera={{ position: [0, 0, 5] }}>
        <Galaxy />
      </Canvas>
      <div className="absolute inset-0 flex items-center justify-center">
        <h1 className="text-6xl font-black text-white tracking-wider">
          <span style={{ color: 'var(--theme-primary)' }}>MAYA</span>
          <span style={{ color: 'var(--theme-secondary)' }}>DIGITAL</span>
        </h1>
      </div>
    </div>
  );
}
===== END frontend/src/components/IntroAnimation.js =====

===== BEGIN frontend/src/components/Modal.js =====
// src/components/Modal.js

export default function Modal({ isOpen, onClose, children }) {
    if (!isOpen) {
      return null; // Si no está abierto, no renderiza nada
    }
  
    return (
      <div 
        className="fixed inset-0 bg-black/70 z-50 flex items-center justify-center p-4"
        onClick={onClose} // Cierra el modal si se hace clic en el fondo
      >
        <div 
          className="bg-white rounded-xl shadow-2xl p-6 md:p-8 w-full max-w-2xl relative"
          onClick={(e) => e.stopPropagation()} // Evita que el clic en el contenido cierre el modal
        >
          <button 
            onClick={onClose}
            className="absolute top-4 right-4 text-gray-400 hover:text-gray-800 text-2xl"
          >
            &times;
          </button>
          {children} {/* Aquí se mostrará el contenido que le pasemos al modal */}
        </div>
      </div>
    );
  }
===== END frontend/src/components/Modal.js =====

===== BEGIN frontend/src/components/PredictiveSearch.js =====
// src/components/PredictiveSearch.js

import { useState, useMemo } from 'react';
import Fuse from 'fuse.js'; // <-- 1. Importamos la librería

// --- Datos y configuración de Fuse ---
const data = {
    hoteles: [ { id: 'h1', name: 'Hotel Balam Kú', type: 'Hotel' }, { id: 'h2', name: 'Hacienda Uxmal', type: 'Hotel' }, { id: 'h3', name: 'Resort Kin Ha', type: 'Hotel' } ],
    experiencias: [ { id: 'e1', name: 'Tour a Chichén Itzá', type: 'Experiencia' }, { id: 'e2', name: 'Paseo a Caballo', type: 'Experiencia' }, { id: 'e3', name: 'Nado en Cenote Sagrado', type: 'Experiencia' } ],
    productos: [ { id: 'p1', name: 'Huipil Ceremonial', type: 'Artesanía' }, { id: 'p2', name: 'Vasija de Sac-bé', type: 'Artesanía' }, { id: 'p3', name: 'Aretes de Filigrana', type: 'Artesanía' } ],
    restaurantes: [ { id: 'r1', name: 'Corazón de Jade', type: 'Restaurante' }, { id: 'r2', name: 'La Ceiba', type: 'Restaurante' } ],
};
const allItems = [ ...data.hoteles, ...data.experiencias, ...data.productos, ...data.restaurantes ];

// 2. Configuramos el motor de búsqueda de Fuse
const fuseOptions = {
  keys: ['name', 'type'], // ¿En qué campos del objeto debe buscar?
  includeScore: true,    // Incluir una puntuación de relevancia
  threshold: 0.4,        // Qué tan "estricta" es la búsqueda (0 es perfecto, 1 es muy permisivo)
};
const fuse = new Fuse(allItems, fuseOptions);


export default function PredictiveSearch() {
    const [searchTerm, setSearchTerm] = useState('');

    // 3. La búsqueda ahora usa Fuse.js
    const suggestions = useMemo(() => {
        if (searchTerm.length < 2) {
            return [];
        }
        // fuse.search() devuelve una lista de resultados con su puntuación
        return fuse.search(searchTerm).map(result => result.item).slice(0, 5);
    }, [searchTerm]);

    const handleFormSubmit = (e) => {
        e.preventDefault();
        console.log("Búsqueda enviada:", searchTerm);
    };

    return (
        <div className="relative bg-white/90 rounded-full p-2 max-w-2xl w-full shadow-2xl transition-all duration-200 focus-within:ring-2 focus-within:ring-theme-primary">
            <form className="flex items-center" onSubmit={handleFormSubmit}>
                <input 
                    type="text" 
                    placeholder="Busca hoteles, experiencias, productos..." 
                    className="w-full bg-transparent border-none text-gray-800 px-4 py-2 text-lg focus:outline-none"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    autoComplete="off" // Desactivamos el autocompletado del navegador
                />
                <button type="submit" className="btn-primary rounded-full px-8 py-3 font-bold text-base flex-shrink-0">Buscar</button>
            </form>

            {suggestions.length > 0 && (
                <div className="absolute top-full mt-2 w-full bg-white rounded-xl shadow-lg border text-left z-50 animate-fade-in">
                    <ul className="py-2">
                        <li className="px-4 pt-1 pb-2 text-xs text-gray-400 font-semibold uppercase">Sugerencias</li>
                        {suggestions.map(item => (
                            <li key={item.id} className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
                                <p className="font-bold">{item.name}</p>
                                <p className="text-sm text-gray-500">{item.type}</p>
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
}
===== END frontend/src/components/PredictiveSearch.js =====

===== BEGIN frontend/src/components/ProductDetailModal.js =====
// src/components/ProductDetailModal.js

import { useState, useEffect } from 'react';

export default function ProductDetailModal({ product, onAddToCart, onClose }) {
    // Estado para saber qué imagen está activa en la galería
    const [activeImage, setActiveImage] = useState('');

    // Cuando el producto cambia, establecemos la primera imagen como la activa
    useEffect(() => {
        if (product && product.images && product.images.length > 0) {
            setActiveImage(product.images[0]);
        }
    }, [product]);

    if (!product) return null;

    const handleAddToCartClick = () => {
        onAddToCart(product);
        onClose(); 
    };

    return (
        <div className="grid md:grid-cols-2 gap-8 items-start">
            {/* Columna de la Galería de Imágenes */}
            <div>
                <div className="aspect-square bg-gray-100 rounded-lg mb-4">
                    <img 
                        src={activeImage} 
                        alt={product.name} 
                        className="w-full h-full object-cover rounded-lg shadow-lg" 
                    />
                </div>
                <div className="flex gap-2 justify-center">
                    {product.images.map((imgUrl, index) => (
                        <div 
                            key={index}
                            className={`w-16 h-16 rounded-md cursor-pointer border-2 transition-all ${activeImage === imgUrl ? 'border-theme-primary' : 'border-transparent hover:border-gray-300'}`}
                            onClick={() => setActiveImage(imgUrl)}
                        >
                            <img src={imgUrl} alt={`Thumbnail ${index + 1}`} className="w-full h-full object-cover rounded" />
                        </div>
                    ))}
                </div>
            </div>

            {/* Columna de Información del Producto */}
            <div>
                <h3 className="text-3xl font-bold">{product.name}</h3>
                <p className="text-gray-500 mb-4">Por {product.artisan}</p>
                <p className="text-gray-700 mb-4">{product.desc}</p>
                <p className="text-3xl font-bold mb-6" style={{ color: 'var(--theme-primary)' }}>${product.price} MXN</p>
                <button onClick={handleAddToCartClick} className="btn-secondary w-full font-bold py-3 rounded-full">
                    Añadir al Carrito
                </button>
            </div>
        </div>
    );
}
===== END frontend/src/components/ProductDetailModal.js =====

===== BEGIN frontend/src/components/RegistrationModal.js =====
// src/components/RegistrationModal.js

import { useState } from 'react';

export default function RegistrationModal({ onRegister, onLogin }) {
    const [isLogin, setIsLogin] = useState(true);
    const [formData, setFormData] = useState({
        email: '',
        password: '',
        first_name: '',
        last_name: '',
        phone: ''
    });
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [error, setError] = useState('');

    const handleInputChange = (e) => {
        setFormData({
            ...formData,
            [e.target.name]: e.target.value
        });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);
        setError('');

        try {
            const endpoint = isLogin ? '/api/auth/login' : '/api/auth/register';
            const payload = isLogin 
                ? { email: formData.email, password: formData.password }
                : { ...formData, role: 'Customer' };

            // --- CAMBIO PRINCIPAL AQUÍ ---
            // Se eliminó 'http://127.0.0.1:8080' para usar una ruta relativa.
            // Ahora Nginx redirigirá la llamada correctamente en el servidor.
            const response = await fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload),
            });

            const result = await response.json();

            if (response.ok) {
                if (isLogin) {
                    onLogin(result);
                } else {
                    onRegister(result);
                }
            } else {
                setError(result.error || 'Error en la autenticación');
            }
        } catch (error) {
            console.error('Error:', error);
            setError('Error de conexión. Intenta nuevamente.');
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <div className="max-w-md mx-auto">
            <div className="text-center mb-6">
                <h2 className="text-3xl font-bold">
                    {isLogin ? 'Iniciar Sesión' : 'Crear Cuenta'}
                </h2>
                <p className="text-gray-600 mt-2">
                    {isLogin 
                        ? 'Ingresa a tu cuenta de Maya Digital'
                        : 'Únete a Maya Digital'
                    }
                </p>
            </div>

            {error && (
                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                    {error}
                </div>
            )}

            <form onSubmit={handleSubmit} className="space-y-4">
                {!isLogin && (
                    <>
                        <div className="grid grid-cols-2 gap-4">
                            <div>
                                <label className="block text-gray-700 font-semibold mb-2">
                                    Nombre
                                </label>
                                <input
                                    type="text"
                                    name="first_name"
                                    value={formData.first_name}
                                    onChange={handleInputChange}
                                    className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500"
                                    required
                                />
                            </div>
                            <div>
                                <label className="block text-gray-700 font-semibold mb-2">
                                    Apellido
                                </label>
                                <input
                                    type="text"
                                    name="last_name"
                                    value={formData.last_name}
                                    onChange={handleInputChange}
                                    className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500"
                                    required
                                />
                            </div>
                        </div>

                        <div>
                            <label className="block text-gray-700 font-semibold mb-2">
                                Teléfono (opcional)
                            </label>
                            <input
                                type="tel"
                                name="phone"
                                value={formData.phone}
                                onChange={handleInputChange}
                                className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500"
                                placeholder="+52 999 123 4567"
                            />
                        </div>
                    </>
                )}

                <div>
                    <label className="block text-gray-700 font-semibold mb-2">
                        Email
                    </label>
                    <input
                        type="email"
                        name="email"
                        value={formData.email}
                        onChange={handleInputChange}
                        className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500"
                        required
                    />
                </div>

                <div>
                    <label className="block text-gray-700 font-semibold mb-2">
                        Contraseña
                    </label>
                    <input
                        type="password"
                        name="password"
                        value={formData.password}
                        onChange={handleInputChange}
                        className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500"
                        required
                        minLength="8"
                    />
                </div>

                <button
                    type="submit"
                    disabled={isSubmitting}
                    className={`w-full py-3 px-4 rounded-lg font-bold transition-colors ${
                        isSubmitting
                            ? 'bg-gray-400 cursor-not-allowed'
                            : 'bg-blue-600 hover:bg-blue-700 text-white'
                    }`}
                >
                    {isSubmitting 
                        ? 'Procesando...' 
                        : isLogin 
                            ? 'Iniciar Sesión' 
                            : 'Crear Cuenta'
                    }
                </button>
            </form>

            <div className="mt-6 text-center">
                <p className="text-gray-600">
                    {isLogin ? '¿No tienes cuenta?' : '¿Ya tienes cuenta?'}
                    <button
                        onClick={() => setIsLogin(!isLogin)}
                        className="text-blue-600 hover:text-blue-800 font-semibold ml-2"
                    >
                        {isLogin ? 'Crear cuenta' : 'Iniciar sesión'}
                    </button>
                </p>
            </div>
        </div>
    );
}
===== END frontend/src/components/RegistrationModal.js =====

===== BEGIN frontend/src/components/RestaurantMenu.js =====
// src/components/RestaurantMenu.js

import { useState, useEffect } from 'react';

// Datos de ejemplo para el menú
const menuItems = [
    { name: 'Cochinita Pibil', price: 250 },
    { name: 'Sopa de Lima', price: 150 },
    { name: 'Poc Chuc', price: 220 },
    { name: 'Relleno Negro', price: 230 },
];

export default function RestaurantMenu({ restaurant }) {
    const [order, setOrder] = useState([]);
    const [total, setTotal] = useState(0);

    useEffect(() => {
        const newTotal = order.reduce((sum, item) => sum + item.price, 0);
        setTotal(newTotal);
    }, [order]);

    const handleAddItem = (item) => {
        setOrder(prevOrder => [...prevOrder, item]);
    };

    const handleRemoveItem = (indexToRemove) => {
        setOrder(prevOrder => prevOrder.filter((_, index) => index !== indexToRemove));
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        alert(`Pedido para ${restaurant.name} por $${total.toFixed(2)} MXN listo para proceder al pago (simulación).`);
    };

    return (
        <div>
            <h2 className="text-3xl font-bold mb-4">Menú - {restaurant.name}</h2>
            
            {/* Lista del Menú */}
            <div className="space-y-3 mb-6">
                {menuItems.map((item, index) => (
                    <div key={index} className="flex justify-between items-center border-b pb-2">
                        <div>
                            <h4 className="font-bold">{item.name}</h4>
                            <p className="text-sm text-gray-600">${item.price.toFixed(2)} MXN</p>
                        </div>
                        <button onClick={() => handleAddItem(item)} className="btn-primary text-xs font-bold py-1 px-3 rounded-full">Añadir</button>
                    </div>
                ))}
            </div>

            {/* Resumen de la Orden */}
            <div className="bg-gray-100 p-4 rounded-lg">
                <h3 className="font-bold text-lg mb-2">Tu Orden</h3>
                <div className="space-y-2">
                    {order.length === 0 ? (
                        <p className="text-gray-500">La orden está vacía.</p>
                    ) : (
                        order.map((item, index) => (
                            <div key={index} className="flex justify-between items-center text-sm">
                                <span>{item.name}</span>
                                <div className="flex items-center gap-4">
                                  <span>${item.price.toFixed(2)}</span>
                                  <button onClick={() => handleRemoveItem(index)} className="text-red-500 hover:text-red-700 font-bold">Quitar</button>
                                </div>
                            </div>
                        ))
                    )}
                </div>
                <div className="mt-4 pt-4 border-t-2 border-dashed font-bold text-xl text-right">
                    Total: ${total.toFixed(2)} MXN
                </div>
            </div>

             <button onClick={handleSubmit} className="btn-secondary w-full font-bold py-3 px-4 rounded-full mt-6">Proceder al Pago</button>
        </div>
    );
}
===== END frontend/src/components/RestaurantMenu.js =====

===== BEGIN frontend/src/components/RestaurantOwnerBanner.js =====
// frontend/src/components/RestaurantOwnerBanner.js

import React, { useState } from 'react';
import { Link } from 'react-router-dom';

export default function RestaurantOwnerBanner() {
    const [isVisible, setIsVisible] = useState(true);

    if (!isVisible) return null;

    return (
        <div className="bg-gradient-to-r from-red-500 via-orange-600 to-yellow-500 text-white py-6 relative overflow-hidden">
            {/* Elementos decorativos de fondo */}
            <div className="absolute inset-0 opacity-20">
                <div className="absolute top-0 left-0 w-40 h-40 bg-white rounded-full -translate-x-20 -translate-y-20"></div>
                <div className="absolute bottom-0 right-0 w-60 h-60 bg-white rounded-full translate-x-20 translate-y-20"></div>
                <div className="absolute top-1/2 left-1/4 w-20 h-20 bg-white rounded-full -translate-y-10"></div>
            </div>
            
            <div className="container mx-auto px-6 relative z-10">
                <div className="flex flex-col lg:flex-row items-center justify-between gap-6">
                    
                    {/* Contenido principal */}
                    <div className="flex-1 text-center lg:text-left">
                        <div className="flex items-center justify-center lg:justify-start mb-2">
                            <span className="text-3xl mr-3">🍽️</span>
                            <h2 className="text-2xl lg:text-3xl font-bold">
                                ¿Tienes un restaurante?
                            </h2>
                        </div>
                        <p className="text-lg lg:text-xl text-orange-100 mb-4 lg:mb-0">
                            Conecta con foodlovers y turistas gastronómicos • 
                            <span className="font-semibold text-yellow-300"> Pedidos online incluidos</span> • 
                            Solo pagas cuando vendes
                        </p>
                        
                        {/* Beneficios rápidos */}
                        <div className="hidden lg:flex items-center space-x-6 mt-3 text-sm">
                            <div className="flex items-center">
                                <span className="text-green-300 mr-1">✓</span>
                                <span>+50% más ventas</span>
                            </div>
                            <div className="flex items-center">
                                <span className="text-green-300 mr-1">✓</span>
                                <span>Sistema de pedidos</span>
                            </div>
                            <div className="flex items-center">
                                <span className="text-green-300 mr-1">✓</span>
                                <span>Marketing gastronómico</span>
                            </div>
                        </div>
                    </div>

                    {/* Botones de acción */}
                    <div className="flex flex-col sm:flex-row gap-3 min-w-fit">
                        <Link 
                            to="/registro-restaurante"
                            className="bg-yellow-400 text-red-900 px-6 py-3 rounded-lg font-bold text-lg hover:bg-yellow-300 transition transform hover:scale-105 shadow-lg text-center"
                        >
                            🍴 Registrar Gratis
                        </Link>
                        <Link 
                            to="/restaurantes-unete"
                            className="border-2 border-white text-white px-6 py-3 rounded-lg font-bold text-lg hover:bg-white hover:text-red-900 transition text-center"
                        >
                            📖 Más Info
                        </Link>
                    </div>

                    {/* Botón para cerrar */}
                    <button
                        onClick={() => setIsVisible(false)}
                        className="absolute top-2 right-2 lg:relative lg:top-auto lg:right-auto text-white hover:text-gray-300 text-xl font-bold w-8 h-8 flex items-center justify-center rounded-full hover:bg-white/20 transition"
                        aria-label="Cerrar banner"
                    >
                        ×
                    </button>
                </div>
            </div>
        </div>
    );
}
===== END frontend/src/components/RestaurantOwnerBanner.js =====

===== BEGIN frontend/src/components/TourBookingForm.js =====
// src/components/TourBookingForm.js

import { useState, useEffect } from 'react';

export default function TourBookingForm({ experience, onConfirm }) {
    const [tourDate, setTourDate] = useState('');
    const [adults, setAdults] = useState(1);
    const [children, setChildren] = useState(0);
    const [total, setTotal] = useState(0);

    const pricePerAdult = experience.price || 1200;
    const pricePerChild = pricePerAdult * 0.6; // Los niños pagan el 60%

    // Efecto para recalcular el total
    useEffect(() => {
        const newTotal = (adults * pricePerAdult) + (children * pricePerChild);
        setTotal(newTotal);
    }, [adults, children, pricePerAdult, pricePerChild]);

    const handleSubmit = (e) => {
        e.preventDefault();
        if (adults < 1) {
            alert('Debe haber al menos un adulto en la reserva.');
            return;
        }
        const bookingData = {
            name: experience.name,
            total: total,
            personas: parseInt(adults, 10) + parseInt(children, 10),
            details: `${adults} adulto(s), ${children} niño(s) para el ${tourDate}`
        };
        onConfirm('experience', bookingData);
    };

    return (
        <div>
            <h2 className="text-3xl font-bold mb-4">Reservar {experience.name}</h2>
            <form onSubmit={handleSubmit}>
                <div className="mb-4">
                    <label className="block text-gray-700 font-semibold">Fecha del Tour</label>
                    <input 
                        type="date" 
                        value={tourDate} 
                        onChange={(e) => setTourDate(e.target.value)} 
                        className="w-full p-2 border rounded-lg mt-1" 
                        required 
                    />
                </div>
                <div className="grid grid-cols-2 gap-4 mb-4">
                    <div>
                        <label className="block text-gray-700 font-semibold">Adultos</label>
                        <input 
                            type="number" 
                            value={adults} 
                            onChange={(e) => setAdults(e.target.value)} 
                            min="1" 
                            className="w-full p-2 border rounded-lg mt-1" 
                        />
                    </div>
                    <div>
                        <label className="block text-gray-700 font-semibold">Niños</label>
                        <input 
                            type="number" 
                            value={children} 
                            onChange={(e) => setChildren(e.target.value)} 
                            min="0" 
                            className="w-full p-2 border rounded-lg mt-1" 
                        />
                    </div>
                </div>
                <div className="mt-6 bg-gray-100 p-4 rounded-lg text-right">
                    <div className="font-bold text-2xl">Total: ${total.toFixed(2)} MXN</div>
                </div>
                <button type="submit" className="btn-primary w-full font-bold py-3 px-4 rounded-full mt-4">Confirmar Reserva</button>
            </form>
        </div>
    );
}

===== END frontend/src/components/TourBookingForm.js =====

===== BEGIN frontend/src/components/TransporteModal.js =====
// src/components/TransporteModal.js

export default function TransporteModal() {
    const handleSubmit = (e) => {
        e.preventDefault();
        alert('Buscando conductor... (simulación)');
    };

    return (
        <div>
            <h3 className="text-2xl font-bold mb-4">Solicitar Viaje Certificado</h3>
            <form onSubmit={handleSubmit}>
                <div className="mb-4">
                    <label className="block text-gray-700 font-semibold">Mi ubicación</label>
                    <input type="text" className="w-full p-2 border rounded-lg mt-1 bg-gray-100" value="Aeropuerto Internacional de Cancún" readOnly />
                </div>
                <div className="mb-4">
                    <label className="block text-gray-700 font-semibold">Destino</label>
                    <input type="text" className="w-full p-2 border rounded-lg mt-1" placeholder="Escribe la dirección o nombre del hotel" required />
                </div>
                <button type="submit" className="btn-secondary w-full font-bold py-3 px-4 rounded-full mt-2">Buscar Conductor</button>
            </form>
        </div>
    );
}
===== END frontend/src/components/TransporteModal.js =====

===== BEGIN frontend/src/index.css =====
/* frontend/src/index.css */

/* 1. Directivas de Tailwind */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* 2. Definición de Variables Globales con tu Identidad Corporativa */
@layer base {
  :root {
    /* Colores Primarios de tu Marca */
    --theme-primary: #42beab;   /* Pantone 3258 U (Verde Jade) */
    --theme-secondary: #e81f76;  /* Pantone 213 C (Rosa Mexicano) */

    /* Colores Secundarios y de Soporte */
    --theme-gold: #d6a031;      /* Pantone 124 U */
    --theme-gray: #a3a5a8;      /* Pantone Cool Gray 6 U */

    /* Colores base de la UI */
    --theme-dark: #1a202c;
    --theme-light: #f7fafc;
  }

  /* --- FONDO CON TEXTURA APLICADO AQUÍ --- */
  body {
    margin: 0;
    overflow-x: hidden;
    font-family: 'Montserrat', sans-serif;
    
    background-color: #f7fafc; /* Color de fondo si la imagen no carga */
    background-image: url("https://www.transparenttextures.com/patterns/subtle-carbon.png");
    background-attachment: fixed; /* Mantiene la textura fija al hacer scroll */
  }
}

/* 3. Estilos Personalizados que usan las Variables */
.card { 
    transition: transform 0.3s ease-out, box-shadow 0.3s ease-out; 
}
.card:hover { 
    transform: translateY(-10px); 
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04); 
}
.btn-primary { 
    background-color: var(--theme-primary); 
    color: white; 
    transition: background-color 0.3s, transform 0.3s; 
}
.btn-primary:hover { 
    background-color: #3aa59b; /* Un tono ligeramente más oscuro del primario */
    transform: scale(1.05); 
}
.btn-secondary { 
    background: var(--theme-secondary); 
    color: white; 
    transition: all 0.3s; 
}
.btn-secondary:hover { 
    transform: scale(1.05); 
    box-shadow: 0 8px 15px rgba(232, 31, 118, 0.3); 
}

/* --- REGLA GLOBAL PARA FORZAR LA ELIMINACIÓN DEL OUTLINE --- */
/* Esta regla se aplica a todos los inputs cuando reciben foco 
  y usa !important para tener la máxima prioridad.
*/
input:focus,
textarea:focus,
select:focus {
    outline: none !important;
    box-shadow: none !important;
    -webkit-tap-highlight-color: transparent !important;
}
===== END frontend/src/index.css =====

===== BEGIN frontend/src/index.js =====
// src/index.js

import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom'; // <-- 1. Importar
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <BrowserRouter> {/* <-- 2. Envolver la App */}
      <App />
    </BrowserRouter>
  </React.StrictMode>
);
===== END frontend/src/index.js =====

===== BEGIN frontend/src/logo.svg (binary, mime=image/svg+xml; charset=us-ascii, base64) =====

===== END frontend/src/logo.svg =====

===== BEGIN frontend/src/pages/AdminPage.js =====
import React, { useState, useEffect, useCallback } from 'react';
import { Navigate } from 'react-router-dom';

/**
 * Función helper para centralizar las llamadas fetch, añadir el token
 * y manejar errores de forma consistente.
 */
const fetchAdminData = async (endpoint, options = {}) => {
    const token = localStorage.getItem('auth_token');
    if (!token) {
        throw new Error('No se encontró el token de autenticación.');
    }

    const response = await fetch(`/api/admin/${endpoint}`, {
        ...options,
        headers: {
            ...options.headers,
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        },
    });

    if (!response.ok) {
        const errorBody = await response.text();
        console.error(`Error en el endpoint [${endpoint}]:`, response.status, errorBody);
        throw new Error(`Error del servidor (${response.status}) en ${endpoint}: ${errorBody}`);
    }

    const contentLength = response.headers.get("content-length");
    if (contentLength === "0" || response.status === 204) {
        return null;
    }

    return response.json();
};

function AdminPage() {
    const [metrics, setMetrics] = useState(null);
    const [businesses, setBusinesses] = useState(null);
    const [bookings, setBookings] = useState(null);
    const [pendingHotels, setPendingHotels] = useState([]);
    const [pendingBusinesses, setPendingBusinesses] = useState([]); // 🔥 NUEVO: Estado para negocios pendientes
    const [loading, setLoading] = useState(true);
    const [activeTab, setActiveTab] = useState('dashboard');
    const [error, setError] = useState(null);
    const [isAuthorized, setIsAuthorized] = useState(undefined);
    const [processing, setProcessing] = useState(null); // 🔥 NUEVO: Para manejar estados de procesamiento

    useEffect(() => {
        console.log('---[AdminPage Mounted]---');
        try {
            const userDataString = localStorage.getItem('user_data');
            const token = localStorage.getItem('auth_token');
            if (!token || !userDataString) {
                console.log('❌ Auth Check: Token o datos de usuario no encontrados.');
                setIsAuthorized(false);
                return;
            }
            const userData = JSON.parse(userDataString);
            if (userData && userData.role === 'Admin') {
                console.log('✅ Auth Check: Usuario autorizado como Admin.', userData);
                setIsAuthorized(true);
            } else {
                console.log('❌ Auth Check: Rol no es "Admin". Rol encontrado:', userData.role);
                setIsAuthorized(false);
            }
        } catch (e) {
            console.error('❌ Auth Check: Error al parsear user_data de localStorage.', e);
            localStorage.clear();
            setIsAuthorized(false);
        }
    }, []);

    const loadAllData = useCallback(async () => {
        setLoading(true);
        setError(null);
        console.log('🚀 Iniciando carga de datos del panel...');

        try {
            // 🔥 AGREGADA LA LLAMADA PARA OBTENER NEGOCIOS PENDIENTES
            const [metricsData, businessesData, bookingsData, pendingHotelsData, pendingBusinessesData] = await Promise.all([
                fetchAdminData('metrics'),
                fetchAdminData('businesses'),
                fetchAdminData('bookings'),
                fetchAdminData('hotels/pending'),
                fetchAdminData('businesses/pending') // 🔥 NUEVO: Obtener negocios pendientes
            ]);
            
            setMetrics(metricsData);
            setBusinesses(businessesData);
            setBookings(bookingsData);
            setPendingHotels(pendingHotelsData?.hotels || pendingHotelsData || []);
            setPendingBusinesses(pendingBusinessesData || []); // 🔥 NUEVO: Guardar negocios pendientes

            console.log('🎉 Todos los datos cargados exitosamente!');
            console.log('📊 Negocios pendientes:', pendingBusinessesData?.length || 0);
        } catch (err) {
            console.error('💥 Error durante la carga de datos del panel:', err);
            setError(err.message);
        } finally {
            setLoading(false);
            console.log('🏁 Carga de datos finalizada.');
        }
    }, []);

    // Función para manejar la aprobación/rechazo de HOTELES
    const handleHotelDecision = async (hotelId, action) => {
        const originalPendingHotels = [...pendingHotels];
        setPendingHotels(current => current.filter(h => h.id !== hotelId));
        setProcessing(hotelId);

        try {
            const endpoint = `hotels/${hotelId}/${action}`;
            await fetchAdminData(endpoint, { method: 'PUT' });
            console.log(`✅ Hotel ${hotelId} ${action === 'approve' ? 'aprobado' : 'rechazado'}`);
            await loadAllData(); // Recargamos todo para mantener consistencia
        } catch (err) {
            setError(`No se pudo completar la acción: ${err.message}`);
            setPendingHotels(originalPendingHotels); // Revertir en caso de error
        } finally {
            setProcessing(null);
        }
    };

    // 🔥 NUEVA FUNCIÓN para manejar la aprobación/rechazo de NEGOCIOS
    const handleBusinessDecision = async (businessId, action) => {
        const originalPendingBusinesses = [...pendingBusinesses];
        setPendingBusinesses(current => current.filter(b => b.id !== businessId));
        setProcessing(businessId);

        try {
            const endpoint = `businesses/${businessId}/${action}`;
            await fetchAdminData(endpoint, { method: 'PUT' });
            console.log(`✅ Negocio ${businessId} ${action === 'approve' ? 'aprobado' : 'rechazado'}`);
            
            // Mostrar mensaje de éxito
            const actionText = action === 'approve' ? 'aprobado' : 'rechazado';
            alert(`Negocio ${actionText} exitosamente`);
            
            await loadAllData(); // Recargamos todo para mantener consistencia
        } catch (err) {
            console.error('❌ Error en decisión de negocio:', err);
            setError(`No se pudo completar la acción: ${err.message}`);
            setPendingBusinesses(originalPendingBusinesses); // Revertir en caso de error
        } finally {
            setProcessing(null);
        }
    };

    useEffect(() => {
        if (isAuthorized === true) {
            loadAllData();
        }
    }, [isAuthorized, loadAllData]);

    // Estados de carga y autorización
    if (isAuthorized === undefined) {
        return (
            <div className="min-h-screen bg-gray-100 flex justify-center items-center">
                <div className="bg-white p-8 rounded-lg shadow">
                    <div className="text-xl">Verificando autorización...</div>
                </div>
            </div>
        );
    }

    if (!isAuthorized) {
        return <Navigate to="/" replace />;
    }

    if (loading) {
        return (
            <div className="min-h-screen bg-gray-100 flex justify-center items-center">
                <div className="bg-white p-8 rounded-lg shadow">
                    <div className="text-xl">Cargando panel de administración...</div>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="min-h-screen bg-gray-100 flex justify-center items-center">
                <div className="bg-white p-8 rounded-lg shadow max-w-md">
                    <div className="text-xl text-red-600 mb-4">Error</div>
                    <div className="text-gray-700">{error}</div>
                    <button 
                        onClick={() => window.location.reload()} 
                        className="mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                    >
                        Intentar de nuevo
                    </button>
                </div>
            </div>
        );
    }

    // 🔥 PESTAÑAS ACTUALIZADAS CON CONTADORES
    const totalPending = pendingHotels.length + pendingBusinesses.length;
    const tabs = [
        { id: 'dashboard', label: 'Dashboard' },
        { 
            id: 'pending-hotels', 
            label: `Hoteles (${pendingHotels.length})`, 
            highlight: pendingHotels.length > 0 
        },
        { 
            id: 'pending-businesses', 
            label: `Restaurantes (${pendingBusinesses.length})`, 
            highlight: pendingBusinesses.length > 0 
        },
        { id: 'businesses', label: 'Todos los Negocios' },
        { id: 'bookings', label: 'Reservas' }
    ];
    
    return (
        <div className="min-h-screen bg-gray-100">
            <header className="bg-white shadow-md">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex flex-col sm:flex-row justify-between items-start sm:items-center">
                    <div className="mb-4 sm:mb-0">
                        <h1 className="text-2xl font-bold text-gray-900">🏛️ Panel de Administración</h1>
                        {totalPending > 0 && (
                            <p className="text-sm text-orange-600 font-medium">
                                ⚠️ {totalPending} elementos pendientes de aprobación
                            </p>
                        )}
                    </div>
                    <div className="flex flex-wrap gap-2">
                        {tabs.map(tab => (
                            <button
                                key={tab.id}
                                onClick={() => setActiveTab(tab.id)}
                                className={`px-4 py-2 text-sm rounded-md font-semibold transition-colors duration-200 ${
                                    activeTab === tab.id 
                                        ? 'bg-blue-600 text-white shadow-lg' 
                                        : 'bg-gray-200 text-gray-800 hover:bg-gray-300'
                                }`}
                            >
                                {tab.label}
                                {tab.highlight && (
                                    <span className="ml-1.5 inline-block w-2.5 h-2.5 bg-red-500 rounded-full animate-pulse"></span>
                                )}
                            </button>
                        ))}
                    </div>
                </div>
            </header>

            <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                {activeTab === 'dashboard' && metrics && <DashboardTab metrics={metrics} />}
                {activeTab === 'pending-hotels' && (
                    <PendingHotelsTab 
                        hotels={pendingHotels} 
                        onDecision={handleHotelDecision}
                        processing={processing}
                    />
                )}
                {activeTab === 'pending-businesses' && (
                    <PendingBusinessesTab 
                        businesses={pendingBusinesses} 
                        onDecision={handleBusinessDecision}
                        processing={processing}
                    />
                )}
                {activeTab === 'businesses' && businesses && <BusinessesTab businesses={businesses} />}
                {activeTab === 'bookings' && bookings && <BookingsTab bookings={bookings} />}
            </main>
        </div>
    );
}

// --- COMPONENTES DE PESTAÑAS EXISTENTES ---

function DashboardTab({ metrics }) {
    const metricCards = [
        { title: "Total Hoteles", value: metrics.total_hotels, subtitle: `Pendientes: ${metrics.pending_hotels}` },
        { title: "Total Usuarios", value: metrics.total_users, subtitle: `Nuevos este mes: ${metrics.new_users_this_month}` },
        { title: "Total Reservas", value: metrics.total_bookings, subtitle: `Este mes: ${metrics.bookings_this_month}` },
        { title: "Ingresos Totales", value: `$${(metrics.total_revenue || 0).toLocaleString('es-MX', { minimumFractionDigits: 2 })}`, subtitle: "MXN" }
    ];

    return (
        <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-800">📊 Dashboard General</h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                {metricCards.map(card => <MetricCard key={card.title} {...card} />)}
            </div>
        </div>
    );
}

function BusinessesTab({ businesses }) {
    if (!businesses || businesses.length === 0) {
        return (
            <div className="text-center p-8 bg-white rounded-lg shadow">
                <h3 className="text-xl font-semibold mb-4">No hay negocios para mostrar</h3>
                <p className="text-gray-500">Los negocios aparecerán aquí una vez que sean registrados</p>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-800">🏢 Todos los Negocios</h2>
            <div className="bg-white rounded-lg shadow overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                        <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">ID</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Negocio</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Tipo</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Ubicación</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Estado</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Reservas</th>
                        </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                        {businesses.map((biz) => (
                            <tr key={biz.id} className="hover:bg-gray-50">
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-500">#{biz.id}</td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{biz.name}</td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{biz.business_type}</td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{biz.location}</td>
                                <td className="px-6 py-4 whitespace-nowrap"><StatusBadge status={biz.status} /></td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{biz.total_bookings || 0}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
}

function BookingsTab({ bookings }) {
    if (!bookings || bookings.length === 0) {
        return (
            <div className="text-center p-8 bg-white rounded-lg shadow">
                <h3 className="text-xl font-semibold mb-4">No hay reservas para mostrar</h3>
                <p className="text-gray-500">Las reservas aparecerán aquí una vez que los usuarios realicen bookings</p>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-800">📅 Todas las Reservas</h2>
            <div className="bg-white rounded-lg shadow overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                        <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Referencia</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Usuario</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Servicio</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Monto</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Estado</th>
                        </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                        {bookings.map((booking) => (
                            <tr key={booking.id} className="hover:bg-gray-50">
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-500">{booking.booking_reference}</td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{booking.user_email}</td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{booking.service_name}</td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${(booking.total_amount || 0).toLocaleString('es-MX')}</td>
                                <td className="px-6 py-4 whitespace-nowrap"><StatusBadge status={booking.status} /></td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
}

// COMPONENTE EXISTENTE PARA HOTELES PENDIENTES
function PendingHotelsTab({ hotels, onDecision, processing }) {
    if (!hotels || hotels.length === 0) {
        return (
            <div className="text-center p-8 bg-white rounded-lg shadow">
                <h3 className="text-xl font-semibold mb-4">✅ No hay hoteles pendientes</h3>
                <p className="text-gray-500">Todos los hoteles han sido procesados</p>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-800">🏨 Hoteles Pendientes de Aprobación</h2>
            {hotels.map(hotel => (
                <div key={hotel.id} className="bg-white rounded-lg shadow-lg p-6 flex flex-col md:flex-row gap-6">
                    <img 
                        src={hotel.image_url || 'https://via.placeholder.com/200x200'} 
                        alt={hotel.name} 
                        className="w-full md:w-48 h-48 object-cover rounded-lg"
                    />
                    <div className="flex-grow">
                        <h3 className="text-xl font-bold">{hotel.name}</h3>
                        <p className="text-gray-500">{hotel.location}</p>
                        <p className="mt-2 text-sm text-gray-700">{hotel.address}</p>
                        <div className="mt-4 pt-4 border-t border-dashed">
                            <p className="text-sm"><span className="font-semibold">Precio:</span> ${hotel.price || 'N/A'} MXN/noche</p>
                            <p className="text-sm"><span className="font-semibold">Email:</span> {hotel.email}</p>
                            <p className="text-sm"><span className="font-semibold">Propietario:</span> {hotel.owner?.first_name} {hotel.owner?.last_name} ({hotel.owner?.owner_email})</p>
                        </div>
                    </div>
                    <div className="flex flex-col space-y-3 justify-center flex-shrink-0">
                        <button 
                            onClick={() => onDecision(hotel.id, 'approve')} 
                            disabled={processing === hotel.id}
                            className="bg-green-500 text-white font-bold py-2 px-6 rounded-lg hover:bg-green-600 transition disabled:opacity-50"
                        >
                            {processing === hotel.id ? 'Procesando...' : '✅ Aprobar'}
                        </button>
                        <button 
                            onClick={() => onDecision(hotel.id, 'reject')} 
                            disabled={processing === hotel.id}
                            className="bg-red-500 text-white font-bold py-2 px-6 rounded-lg hover:bg-red-600 transition disabled:opacity-50"
                        >
                            {processing === hotel.id ? 'Procesando...' : '❌ Rechazar'}
                        </button>
                    </div>
                </div>
            ))}
        </div>
    );
}

// 🔥 NUEVO COMPONENTE PARA NEGOCIOS PENDIENTES
function PendingBusinessesTab({ businesses, onDecision, processing }) {
    if (!businesses || businesses.length === 0) {
        return (
            <div className="text-center p-8 bg-white rounded-lg shadow">
                <h3 className="text-xl font-semibold mb-4">✅ No hay restaurantes pendientes</h3>
                <p className="text-gray-500">Todos los restaurantes han sido procesados</p>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-800">🍽️ Restaurantes Pendientes de Aprobación</h2>
            {businesses.map(business => (
                <div key={business.id} className="bg-white rounded-lg shadow-lg p-6">
                    <div className="flex justify-between items-start">
                        <div className="flex-1">
                            <div className="flex items-center space-x-3 mb-4">
                                <h3 className="text-xl font-semibold">{business.name}</h3>
                                <span className="px-3 py-1 bg-orange-100 text-orange-800 text-sm rounded-full">
                                    {business.business_type}
                                </span>
                            </div>
                            
                            <div className="grid md:grid-cols-2 gap-4 mb-4">
                                <div>
                                    <p className="text-gray-600 mb-2">{business.description}</p>
                                    <p className="text-sm text-gray-500">
                                        📍 {business.location} • {business.address}
                                    </p>
                                    <p className="text-sm text-gray-500">
                                        📞 {business.phone} • ✉️ {business.email}
                                    </p>
                                    {business.website && (
                                        <p className="text-sm text-gray-500">
                                            🌐 <a href={business.website} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                                                {business.website}
                                            </a>
                                        </p>
                                    )}
                                </div>
                                
                                <div>
                                    <p className="text-sm text-gray-600 mb-1">
                                        <strong>Propietario:</strong> {business.owner_name || 'N/A'}
                                    </p>
                                    <p className="text-sm text-gray-600 mb-1">
                                        <strong>Email:</strong> {business.owner_email}
                                    </p>
                                    <p className="text-sm text-gray-600">
                                        <strong>Registrado:</strong> {new Date(business.created_at).toLocaleDateString('es-MX')}
                                    </p>
                                </div>
                            </div>

                            {/* Mostrar datos específicos del negocio */}
                            {business.business_data && Object.keys(business.business_data).length > 0 && (
                                <div className="bg-gray-50 p-4 rounded-lg mb-4">
                                    <h4 className="font-semibold mb-2">Información del Restaurante:</h4>
                                    <div className="text-sm space-y-1">
                                        {business.business_data.specialty && (
                                            <p><strong>Especialidad:</strong> {business.business_data.specialty}</p>
                                        )}
                                        {business.business_data.cuisine_type && (
                                            <p><strong>Tipo de Cocina:</strong> {business.business_data.cuisine_type}</p>
                                        )}
                                        {business.business_data.capacity && (
                                            <p><strong>Capacidad:</strong> {business.business_data.capacity} personas</p>
                                        )}
                                        {business.business_data.price_range && (
                                            <p><strong>Rango de Precios:</strong> {business.business_data.price_range}</p>
                                        )}
                                        {business.business_data.delivery_available && (
                                            <p><strong>Delivery:</strong> {business.business_data.delivery_available ? 'Sí' : 'No'}</p>
                                        )}
                                        {business.business_data.reservation_required && (
                                            <p><strong>Reservas Requeridas:</strong> {business.business_data.reservation_required ? 'Sí' : 'No'}</p>
                                        )}
                                    </div>
                                </div>
                            )}
                        </div>
                        
                        <div className="flex flex-col space-y-3 ml-6">
                            <button
                                onClick={() => onDecision(business.id, 'approve')}
                                disabled={processing === business.id}
                                className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 transition-colors font-medium"
                            >
                                {processing === business.id ? 'Procesando...' : '✅ Aprobar'}
                            </button>
                            
                            <button
                                onClick={() => onDecision(business.id, 'reject')}
                                disabled={processing === business.id}
                                className="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50 transition-colors font-medium"
                            >
                                {processing === business.id ? 'Procesando...' : '❌ Rechazar'}
                            </button>
                        </div>
                    </div>
                </div>
            ))}
        </div>
    );
}

// --- COMPONENTES DE UI REUTILIZABLES ---

const MetricCard = ({ title, value, subtitle }) => (
    <div className="bg-white rounded-xl shadow p-6 transition hover:shadow-lg hover:-translate-y-1">
        <h3 className="text-sm font-semibold text-gray-500">{title}</h3>
        <p className="text-3xl font-bold text-gray-900 mt-1">{value}</p>
        <p className="text-sm text-gray-400 mt-1">{subtitle}</p>
    </div>
);

const StatusBadge = ({ status }) => {
    const statusStyles = {
        approved: 'bg-green-100 text-green-800',
        confirmed: 'bg-green-100 text-green-800',
        pending: 'bg-yellow-100 text-yellow-800',
        rejected: 'bg-red-100 text-red-800',
        cancelled: 'bg-red-100 text-red-800',
    };
    const statusText = {
        approved: 'Aprobado',
        confirmed: 'Confirmada',
        pending: 'Pendiente',
        rejected: 'Rechazado',
        cancelled: 'Cancelada',
    };
    return (
        <span className={`px-3 py-1 text-xs font-semibold rounded-full ${statusStyles[status] || 'bg-gray-100 text-gray-800'}`}>
            {statusText[status] || status}
        </span>
    );
};

export default AdminPage;
===== END frontend/src/pages/AdminPage.js =====

===== BEGIN frontend/src/pages/ArtesanosPage.js =====
// src/pages/ArtesanosPage.js

import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';

// Importamos las imágenes locales
import huipil1 from '../assets/huipil-1.jpg';
import huipil2 from '../assets/huipil-2.jpg';
import huipil3 from '../assets/huipil-3.jpg';
import vasija1 from '../assets/vasija-1.jpg';
import vasija2 from '../assets/vasija-2.jpg';
import aretes1 from '../assets/aretes-1.jpg';

// Usamos los datos con las imágenes locales
const allProducts = [
    { id: 1, name: 'Huipil Ceremonial', artisan: 'Elena Poot', price: 1800, category: 'textil', images: [huipil1, huipil2, huipil3], desc: 'Tejido a mano con técnicas ancestrales...' },
    { id: 2, name: 'Vasija de Sac-bé', artisan: 'Mateo Cruz', price: 950, category: 'ceramica', images: [vasija1, vasija2], desc: 'Cerámica de alta temperatura...' },
    { id: 3, name: 'Aretes de Filigrana', artisan: 'Isabel Chi', price: 1200, category: 'joyeria', images: [aretes1], desc: 'Elegantes aretes de plata...' },
];

export default function ArtesanosPage() {
    // El resto del componente no necesita los datos del backend por ahora, usamos los locales
    const [filteredProducts, setFilteredProducts] = useState(allProducts);
    const [searchTerm, setSearchTerm] = useState('');
    const [selectedCategory, setSelectedCategory] = useState('all');

    useEffect(() => {
        let products = allProducts.filter(p => 
            (selectedCategory === 'all' || p.category === selectedCategory) &&
            (p.name.toLowerCase().includes(searchTerm.toLowerCase()) || p.artisan.toLowerCase().includes(searchTerm.toLowerCase()))
        );
        setFilteredProducts(products);
    }, [searchTerm, selectedCategory]);

    return (
        <div className="container mx-auto px-6 py-16">
            <h2 className="text-4xl font-bold mb-2 text-center">Corazón Maya</h2>
            {/* ... resto del JSX de la página de artesanos ... */}
            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
                {filteredProducts.map(product => (
                    // --- AQUÍ ESTÁ EL CAMBIO ---
                    // El prop 'state' envía el objeto 'product' completo a la página de detalle
                    <Link to={`/artesanos/${product.id}`} state={{ product: product }} key={product.id} className="card bg-white rounded-xl shadow-lg overflow-hidden block">
                        <img src={product.images[0]} alt={product.name} className="w-full h-56 object-cover" />
                        <div className="p-4">
                            <h3 className="font-bold">{product.name}</h3>
                            <p className="text-sm text-gray-500">Por {product.artisan}</p>
                            <p className="font-bold mt-2" style={{ color: 'var(--theme-primary)' }}>${product.price} MXN</p>
                        </div>
                    </Link>
                ))}
            </div>
        </div>
    );
}
===== END frontend/src/pages/ArtesanosPage.js =====

===== BEGIN frontend/src/pages/CreateHotelPage.js =====
// frontend/src/pages/CreateHotelPage.js

import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';

export default function CreateHotelPage() {
    const [formData, setFormData] = useState({
        name: '',
        description: '',
        location: '',
        address: '',
        price: '',
        image_url: '',
        phone: '',
        email: '',
        website: '',
        rooms_available: ''
    });
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [error, setError] = useState('');
    const navigate = useNavigate();

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);
        setError('');

        try {
            const token = localStorage.getItem('auth_token');
            if (!token) {
                setError('No estás autenticado. Por favor, inicia sesión de nuevo.');
                setIsSubmitting(false);
                return;
            }
            
            // Asegurarse de que los campos numéricos se envíen como números
            const payload = {
                ...formData,
                price: parseFloat(formData.price) || 0,
                rooms_available: parseInt(formData.rooms_available, 10) || 0,
            };

            const response = await fetch('/api/hotels', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(payload)
            });

            const result = await response.json();

            if (response.ok) {
                alert('¡Hotel enviado para aprobación! Serás redirigido a tu portal.');
                navigate('/portal'); // Redirigir al portal después del éxito
            } else {
                setError(result.error || 'Ocurrió un error al registrar el hotel.');
            }

        } catch (err) {
            setError('Error de conexión con el servidor. Intenta de nuevo.');
        } finally {
            setIsSubmitting(false);
        }
    };
    
    return (
        <div className="container mx-auto px-6 py-12 max-w-3xl">
            <div className="mb-6">
                <Link to="/portal" className="text-theme-primary hover:underline">&larr; Volver a mi Portal</Link>
            </div>
            <div className="bg-white p-8 rounded-xl shadow-lg">
                <h1 className="text-3xl font-bold mb-6">Registrar un Nuevo Hotel</h1>
                
                {error && <div className="bg-red-100 text-red-700 p-3 rounded-lg mb-4">{error}</div>}

                <form onSubmit={handleSubmit} className="space-y-6">
                    <InputField label="Nombre del Hotel" name="name" value={formData.name} onChange={handleInputChange} required />
                    <TextAreaField label="Descripción" name="description" value={formData.description} onChange={handleInputChange} />
                    <InputField label="Ubicación (Ej: Tulum, Quintana Roo)" name="location" value={formData.location} onChange={handleInputChange} required />
                    <InputField label="Dirección Completa" name="address" value={formData.address} onChange={handleInputChange} required />
                    <InputField label="Precio por Noche (MXN)" name="price" type="number" step="0.01" value={formData.price} onChange={handleInputChange} required />
                    <InputField label="URL de la Imagen Principal" name="image_url" value={formData.image_url} onChange={handleInputChange} />
                    <InputField label="Email de Contacto" name="email" type="email" value={formData.email} onChange={handleInputChange} />
                    <InputField label="Teléfono de Contacto" name="phone" value={formData.phone} onChange={handleInputChange} />
                    <InputField label="Sitio Web" name="website" value={formData.website} onChange={handleInputChange} />
                    <InputField label="Habitaciones Disponibles" name="rooms_available" type="number" value={formData.rooms_available} onChange={handleInputChange} />

                    <button type="submit" disabled={isSubmitting} className="btn-primary w-full font-bold py-3 rounded-lg disabled:bg-gray-400">
                        {isSubmitting ? 'Enviando...' : 'Enviar para Aprobación'}
                    </button>
                </form>
            </div>
        </div>
    );
}

// Componentes auxiliares para simplificar el formulario
const InputField = ({ label, name, ...rest }) => (
    <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
        <input name={name} {...rest} className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-theme-primary" />
    </div>
);

const TextAreaField = ({ label, name, ...rest }) => (
    <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
        <textarea name={name} {...rest} rows="4" className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-theme-primary" />
    </div>
);
===== END frontend/src/pages/CreateHotelPage.js =====

===== BEGIN frontend/src/pages/EditHotelPage.js =====
// frontend/src/pages/EditHotelPage.js
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Navigate } from 'react-router-dom';

function EditHotelPage() {
    const { hotelId } = useParams();
    const navigate = useNavigate();
    const [loading, setLoading] = useState(true);
    const [submitting, setSubmitting] = useState(false);
    const [error, setError] = useState('');
    const [success, setSuccess] = useState('');
    
    console.log('Hotel ID desde URL:', hotelId); // Para debug
    
    const [formData, setFormData] = useState({
        name: '',
        location: '',
        address: '',
        description: '',
        price: '',
        image_url: '',
        amenities: [],
        rooms_available: ''
    });

    // Verificar autorización
    const isAuthorized = () => {
        try {
            const user = JSON.parse(localStorage.getItem('user_data'));
            const token = localStorage.getItem('auth_token');
            return token && user && (user.role === 'HotelOwner' || user.role === 'Admin');
        } catch {
            return false;
        }
    };

    // Cargar datos del hotel
    useEffect(() => {
        if (!isAuthorized()) return;
        if (!hotelId) {
            setError('ID de hotel no válido');
            setLoading(false);
            return;
        }

        const fetchHotelData = async () => {
            try {
                const token = localStorage.getItem('auth_token');
                const url = `http://127.0.0.1:8080/api/hotels/${hotelId}`;
                console.log('Fetching hotel data from:', url);
                
                const response = await fetch(url, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                if (!response.ok) throw new Error('No se pudo cargar la información del hotel');

                const data = await response.json();
                console.log('Datos del hotel recibidos:', data); // Para debug
                
                // La respuesta puede venir directamente o dentro de un objeto hotel
                const hotelData = data.hotel || data;
                
                setFormData({
                    name: hotelData.name || '',
                    location: hotelData.location || '',
                    address: hotelData.address || '',
                    description: hotelData.description || '',
                    price: hotelData.price || '',
                    image_url: hotelData.image_url || '',
                    amenities: hotelData.amenities || [],
                    rooms_available: hotelData.rooms_available || ''
                });
            } catch (err) {
                console.error('Error al cargar hotel:', err);
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };

        fetchHotelData();
    }, [hotelId]);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const handleAmenitiesChange = (e) => {
        const value = e.target.value;
        setFormData(prev => ({
            ...prev,
            amenities: value.split(',').map(item => item.trim()).filter(item => item)
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setSubmitting(true);
        setError('');
        setSuccess('');

        try {
            const token = localStorage.getItem('auth_token');
            const response = await fetch(`/api/hotels/${hotelId}`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ...formData,
                    price: parseFloat(formData.price),
                    rooms_available: parseInt(formData.rooms_available)
                })
            });

            if (!response.ok) throw new Error('Error al actualizar el hotel');

            setSuccess('Hotel actualizado exitosamente');
            setTimeout(() => navigate('/portal'), 2000);
        } catch (err) {
            setError(err.message);
        } finally {
            setSubmitting(false);
        }
    };

    if (!isAuthorized()) return <Navigate to="/" replace />;
    if (loading) return <div className="p-8 text-center">Cargando información del hotel...</div>;

    return (
        <div className="min-h-screen bg-gray-50 py-12">
            <div className="max-w-2xl mx-auto px-6">
                <div className="bg-white rounded-lg shadow-md p-8">
                    <div className="mb-8">
                        <h1 className="text-3xl font-bold text-gray-900">Editar Hotel</h1>
                        <p className="text-gray-600 mt-2">Actualiza la información de tu propiedad</p>
                    </div>

                    {error && (
                        <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-md">
                            <p className="text-red-800">{error}</p>
                        </div>
                    )}

                    {success && (
                        <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded-md">
                            <p className="text-green-800">{success}</p>
                        </div>
                    )}

                    <form onSubmit={handleSubmit} className="space-y-6">
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                Nombre del Hotel *
                            </label>
                            <input
                                type="text"
                                name="name"
                                value={formData.name}
                                onChange={handleInputChange}
                                required
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            />
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                Ubicación *
                            </label>
                            <input
                                type="text"
                                name="location"
                                value={formData.location}
                                onChange={handleInputChange}
                                required
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            />
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                Dirección *
                            </label>
                            <input
                                type="text"
                                name="address"
                                value={formData.address}
                                onChange={handleInputChange}
                                required
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            />
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                Descripción *
                            </label>
                            <textarea
                                name="description"
                                value={formData.description}
                                onChange={handleInputChange}
                                required
                                rows={4}
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            />
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Precio por noche (MXN) *
                                </label>
                                <input
                                    type="number"
                                    name="price"
                                    value={formData.price}
                                    onChange={handleInputChange}
                                    required
                                    min="0"
                                    step="0.01"
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                />
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Habitaciones disponibles *
                                </label>
                                <input
                                    type="number"
                                    name="rooms_available"
                                    value={formData.rooms_available}
                                    onChange={handleInputChange}
                                    required
                                    min="1"
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                />
                            </div>
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                URL de la imagen
                            </label>
                            <input
                                type="url"
                                name="image_url"
                                value={formData.image_url}
                                onChange={handleInputChange}
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            />
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                Amenidades (separadas por comas)
                            </label>
                            <input
                                type="text"
                                value={formData.amenities.join(', ')}
                                onChange={handleAmenitiesChange}
                                placeholder="WiFi, Piscina, Gym, Spa..."
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            />
                        </div>

                        <div className="flex gap-4 pt-6">
                            <button
                                type="submit"
                                disabled={submitting}
                                className="flex-1 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white font-bold py-3 px-6 rounded-lg transition"
                            >
                                {submitting ? 'Guardando...' : 'Guardar Cambios'}
                            </button>
                            
                            <button
                                type="button"
                                onClick={() => navigate('/portal')}
                                className="flex-1 bg-gray-600 hover:bg-gray-700 text-white font-bold py-3 px-6 rounded-lg transition"
                            >
                                Cancelar
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    );
}

export default EditHotelPage;
===== END frontend/src/pages/EditHotelPage.js =====

===== BEGIN frontend/src/pages/ExperienciasPage.js =====
import { useState, useEffect } from 'react';

export default function ExperienciasPage({ onExperienceClick }) {
    const [experiencias, setExperiencias] = useState([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        fetch('/api/experiencias')
            .then(res => res.json())
            .then(data => {
                setExperiencias(data);
                setIsLoading(false);
            })
            .catch(error => console.error("Error al obtener experiencias:", error));
    }, []);

    if (isLoading) {
        return <div className="container mx-auto px-6 py-16 text-center"><p>Cargando experiencias...</p></div>;
    }

    return (
        <div className="container mx-auto px-6 py-16">
            <h2 className="text-4xl font-bold mb-2 text-center">Aventura Maya</h2>
            <p className="text-center text-lg text-gray-600 mb-10">Vive la Historia y la Naturaleza</p>
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                {experiencias.map(exp => (
                    <div key={exp.id} className="card bg-white rounded-xl shadow-lg overflow-hidden">
                        <img src={exp.image} alt={exp.name} className="w-full h-56 object-cover" />
                        <div className="p-6">
                            <h3 className="text-2xl font-bold mb-2">{exp.name}</h3>
                            <div className="flex justify-between items-center mt-4">
                                <span className="text-xl font-bold" style={{ color: 'var(--theme-primary)' }}>${exp.price} MXN</span>
                                <button onClick={() => onExperienceClick(exp)} className="btn-primary font-bold py-2 px-4 rounded-full">Reservar</button>
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
}

===== END frontend/src/pages/ExperienciasPage.js =====

===== BEGIN frontend/src/pages/HotelLandingPage.js =====
// frontend/src/pages/HotelLandingPage.js

import React from 'react';
import { Link } from 'react-router-dom';

export default function HotelLandingPage() {
    const benefits = [
        {
            icon: '🌍',
            title: 'Alcance Global',
            description: 'Llega a miles de viajeros de todo el mundo buscando experiencias auténticas en México'
        },
        {
            icon: '💰',
            title: 'Sin Costo Inicial',
            description: 'Únete gratis y solo paga una comisión cuando recibas reservas confirmadas'
        },
        {
            icon: '📱',
            title: 'Gestión Fácil',
            description: 'Panel intuitivo para administrar reservas, precios y disponibilidad'
        },
        {
            icon: '📈',
            title: 'Aumenta tus Ingresos',
            description: 'Nuestros partners incrementan sus reservas hasta en un 40%'
        },
        {
            icon: '🎯',
            title: 'Marketing Dirigido',
            description: 'Promocionamos tu hotel a viajeros interesados en turismo cultural y sostenible'
        },
        {
            icon: '🏆',
            title: 'Soporte Especializado',
            description: 'Equipo dedicado para ayudarte a optimizar tu perfil y maximizar reservas'
        }
    ];

    const steps = [
        {
            number: '1',
            title: 'Regístrate',
            description: 'Completa el formulario con la información de tu hotel',
            icon: '📝'
        },
        {
            number: '2',
            title: 'Verificación',
            description: 'Nuestro equipo revisa y aprueba tu hotel (24-48 horas)',
            icon: '✅'
        },
        {
            number: '3',
            title: 'Empieza a Vender',
            description: 'Tu hotel aparece en nuestra plataforma y empiezas a recibir reservas',
            icon: '🚀'
        }
    ];

    const testimonials = [
        {
            name: 'Carlos Hernández',
            hotel: 'Hotel Balam Kú, Tulum',
            quote: 'Desde que nos unimos a Maya Digital, nuestras reservas aumentaron 35%. La plataforma es muy fácil de usar.',
            rating: 5
        },
        {
            name: 'Ana Martínez',
            hotel: 'Hacienda Uxmal, Yucatán',
            quote: 'El soporte es excelente y realmente entienden las necesidades de los hoteles boutique.',
            rating: 5
        },
        {
            name: 'Roberto Pech',
            hotel: 'Casa Zazil-Ha, Isla Mujeres',
            quote: 'Maya Digital nos conectó con viajeros que buscan experiencias auténticas. Perfecto para nuestro hotel.',
            rating: 5
        }
    ];

    return (
        <div className="min-h-screen bg-white">
            
            {/* Hero Section */}
            <section className="bg-gradient-to-br from-blue-600 via-blue-700 to-indigo-800 text-white">
                <div className="container mx-auto px-6 py-20">
                    <div className="grid lg:grid-cols-2 gap-12 items-center">
                        <div>
                            <h1 className="text-4xl lg:text-6xl font-bold mb-6 leading-tight">
                                Haz Crecer tu Hotel con 
                                <span className="text-yellow-400"> Maya Digital</span>
                            </h1>
                            <p className="text-xl lg:text-2xl mb-8 text-blue-100">
                                Únete a la plataforma líder de turismo sustentable en México 
                                y conecta con viajeros que buscan experiencias auténticas.
                            </p>
                            
                            <div className="flex flex-col sm:flex-row gap-4 mb-8">
                                <Link 
                                    to="/registro-hotel"
                                    className="bg-yellow-400 text-blue-900 px-8 py-4 rounded-lg font-bold text-lg hover:bg-yellow-300 transition text-center"
                                >
                                    🚀 Registrar Mi Hotel
                                </Link>
                                <a 
                                    href="#como-funciona"
                                    className="border-2 border-white text-white px-8 py-4 rounded-lg font-bold text-lg hover:bg-white hover:text-blue-900 transition text-center"
                                >
                                    📖 Cómo Funciona
                                </a>
                            </div>

                            <div className="flex items-center space-x-6 text-blue-100">
                                <div className="flex items-center space-x-2">
                                    <span className="text-yellow-400">✓</span>
                                    <span>Sin costo inicial</span>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <span className="text-yellow-400">✓</span>
                                    <span>Configuración en 24h</span>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <span className="text-yellow-400">✓</span>
                                    <span>Soporte 24/7</span>
                                </div>
                            </div>
                        </div>

                        <div className="hidden lg:block">
                            <div className="relative">
                                <img 
                                    src="https://images.unsplash.com/photo-1571896349842-33c89424de2d?q=80&w=2080&auto=format&fit=crop" 
                                    alt="Hotel de lujo en la playa"
                                    className="rounded-2xl shadow-2xl"
                                />
                                <div className="absolute -bottom-6 -left-6 bg-white text-gray-900 p-6 rounded-xl shadow-xl">
                                    <div className="text-3xl font-bold text-green-600">+40%</div>
                                    <div className="text-sm text-gray-600">Aumento promedio en reservas</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            {/* Stats Section */}
            <section className="py-16 bg-gray-50">
                <div className="container mx-auto px-6">
                    <div className="grid grid-cols-2 lg:grid-cols-4 gap-8 text-center">
                        <div>
                            <div className="text-4xl font-bold text-blue-600 mb-2">500+</div>
                            <div className="text-gray-600">Hoteles Partners</div>
                        </div>
                        <div>
                            <div className="text-4xl font-bold text-blue-600 mb-2">50K+</div>
                            <div className="text-gray-600">Reservas Procesadas</div>
                        </div>
                        <div>
                            <div className="text-4xl font-bold text-blue-600 mb-2">95%</div>
                            <div className="text-gray-600">Satisfacción del Cliente</div>
                        </div>
                        <div>
                            <div className="text-4xl font-bold text-blue-600 mb-2">24/7</div>
                            <div className="text-gray-600">Soporte Técnico</div>
                        </div>
                    </div>
                </div>
            </section>

            {/* Benefits Section */}
            <section className="py-20">
                <div className="container mx-auto px-6">
                    <div className="text-center mb-16">
                        <h2 className="text-4xl font-bold text-gray-900 mb-4">
                            ¿Por qué elegir Maya Digital?
                        </h2>
                        <p className="text-xl text-gray-600 max-w-3xl mx-auto">
                            Somos más que una plataforma de reservas. Somos tu socio estratégico 
                            para hacer crecer tu negocio hotelero de manera sostenible.
                        </p>
                    </div>

                    <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                        {benefits.map((benefit, index) => (
                            <div key={index} className="bg-white p-8 rounded-xl shadow-lg hover:shadow-xl transition">
                                <div className="text-4xl mb-4">{benefit.icon}</div>
                                <h3 className="text-xl font-bold text-gray-900 mb-3">{benefit.title}</h3>
                                <p className="text-gray-600">{benefit.description}</p>
                            </div>
                        ))}
                    </div>
                </div>
            </section>

            {/* How it Works Section */}
            <section id="como-funciona" className="py-20 bg-gradient-to-r from-blue-50 to-indigo-50">
                <div className="container mx-auto px-6">
                    <div className="text-center mb-16">
                        <h2 className="text-4xl font-bold text-gray-900 mb-4">
                            ¿Cómo funciona?
                        </h2>
                        <p className="text-xl text-gray-600">
                            Tres pasos simples para empezar a recibir más reservas
                        </p>
                    </div>

                    <div className="grid md:grid-cols-3 gap-8">
                        {steps.map((step, index) => (
                            <div key={index} className="text-center">
                                <div className="bg-blue-600 text-white w-16 h-16 rounded-full flex items-center justify-center text-2xl font-bold mx-auto mb-6">
                                    {step.number}
                                </div>
                                <div className="text-4xl mb-4">{step.icon}</div>
                                <h3 className="text-xl font-bold text-gray-900 mb-3">{step.title}</h3>
                                <p className="text-gray-600">{step.description}</p>
                            </div>
                        ))}
                    </div>

                    <div className="text-center mt-12">
                        <Link 
                            to="/registro-hotel"
                            className="bg-blue-600 text-white px-8 py-4 rounded-lg font-bold text-lg hover:bg-blue-700 transition inline-block"
                        >
                            Empezar Ahora →
                        </Link>
                    </div>
                </div>
            </section>

            {/* Testimonials Section */}
            <section className="py-20">
                <div className="container mx-auto px-6">
                    <div className="text-center mb-16">
                        <h2 className="text-4xl font-bold text-gray-900 mb-4">
                            Lo que dicen nuestros partners
                        </h2>
                        <p className="text-xl text-gray-600">
                            Historias reales de hoteles que han crecido con Maya Digital
                        </p>
                    </div>

                    <div className="grid md:grid-cols-3 gap-8">
                        {testimonials.map((testimonial, index) => (
                            <div key={index} className="bg-white p-8 rounded-xl shadow-lg">
                                <div className="flex items-center mb-4">
                                    {[...Array(testimonial.rating)].map((_, i) => (
                                        <span key={i} className="text-yellow-400 text-xl">★</span>
                                    ))}
                                </div>
                                <p className="text-gray-600 mb-6 italic">"{testimonial.quote}"</p>
                                <div>
                                    <div className="font-bold text-gray-900">{testimonial.name}</div>
                                    <div className="text-sm text-gray-500">{testimonial.hotel}</div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </section>

            {/* FAQ Section */}
            <section className="py-20 bg-gray-50">
                <div className="container mx-auto px-6">
                    <div className="text-center mb-16">
                        <h2 className="text-4xl font-bold text-gray-900 mb-4">
                            Preguntas Frecuentes
                        </h2>
                    </div>

                    <div className="max-w-3xl mx-auto space-y-6">
                        <FAQItem 
                            question="¿Cuánto cuesta unirse a Maya Digital?"
                            answer="Es completamente gratis unirse. Solo pagas una comisión del 15% cuando recibes una reserva confirmada. No hay costos iniciales ni cuotas mensuales."
                        />
                        <FAQItem 
                            question="¿Cuánto tiempo toma la aprobación?"
                            answer="Nuestro equipo revisa cada solicitud en un plazo de 24-48 horas. Una vez aprobado, tu hotel estará visible inmediatamente en la plataforma."
                        />
                        <FAQItem 
                            question="¿Qué tipo de hoteles aceptan?"
                            answer="Aceptamos hoteles boutique, haciendas, casas de huéspedes, eco-lodges y propiedades únicas que ofrezcan experiencias auténticas mexicanas."
                        />
                        <FAQItem 
                            question="¿Cómo recibo los pagos?"
                            answer="Los pagos se procesan automáticamente y se transfieren a tu cuenta bancaria cada 15 días. Deducimos nuestra comisión y te enviamos el resto."
                        />
                        <FAQItem 
                            question="¿Puedo cancelar en cualquier momento?"
                            answer="Sí, puedes pausar o cancelar tu cuenta en cualquier momento desde tu panel de control. No hay penalizaciones ni costos de cancelación."
                        />
                    </div>
                </div>
            </section>

            {/* CTA Final */}
            <section className="py-20 bg-gradient-to-r from-blue-600 to-indigo-700 text-white">
                <div className="container mx-auto px-6 text-center">
                    <h2 className="text-4xl font-bold mb-4">
                        ¿Listo para hacer crecer tu hotel?
                    </h2>
                    <p className="text-xl mb-8 max-w-2xl mx-auto">
                        Únete a cientos de hoteles que ya están aumentando sus reservas 
                        con Maya Digital. El registro toma menos de 10 minutos.
                    </p>
                    
                    <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
                        <Link 
                            to="/registro-hotel"
                            className="bg-yellow-400 text-blue-900 px-8 py-4 rounded-lg font-bold text-lg hover:bg-yellow-300 transition"
                        >
                            🚀 Registrar Mi Hotel Gratis
                        </Link>
                        <div className="text-blue-100">
                            o <a href="mailto:partners@mayadigital.com" className="underline hover:text-white">contáctanos directamente</a>
                        </div>
                    </div>

                    <div className="mt-8 text-blue-200 text-sm">
                        ✓ Sin costo inicial • ✓ Configuración gratuita • ✓ Soporte incluido
                    </div>
                </div>
            </section>

            {/* Footer */}
            <footer className="bg-gray-900 text-white py-12">
                <div className="container mx-auto px-6">
                    <div className="grid md:grid-cols-4 gap-8">
                        <div>
                            <h3 className="text-xl font-bold mb-4">Maya Digital</h3>
                            <p className="text-gray-400">
                                La plataforma líder de turismo sustentable en México.
                            </p>
                        </div>
                        <div>
                            <h4 className="font-bold mb-4">Para Hoteles</h4>
                            <ul className="space-y-2 text-gray-400">
                                <li><Link to="/registro-hotel" className="hover:text-white">Registrar Hotel</Link></li>
                                <li><a href="#" className="hover:text-white">Centro de Ayuda</a></li>
                                <li><a href="#" className="hover:text-white">Recursos</a></li>
                            </ul>
                        </div>
                        <div>
                            <h4 className="font-bold mb-4">Soporte</h4>
                            <ul className="space-y-2 text-gray-400">
                                <li><a href="tel:+529991234567" className="hover:text-white">+52 999 123 4567</a></li>
                                <li><a href="mailto:partners@mayadigital.com" className="hover:text-white">partners@mayadigital.com</a></li>
                                <li><a href="#" className="hover:text-white">Chat en vivo</a></li>
                            </ul>
                        </div>
                        <div>
                            <h4 className="font-bold mb-4">Síguenos</h4>
                            <div className="flex space-x-4">
                                <a href="#" className="text-gray-400 hover:text-white">Facebook</a>
                                <a href="#" className="text-gray-400 hover:text-white">Instagram</a>
                                <a href="#" className="text-gray-400 hover:text-white">LinkedIn</a>
                            </div>
                        </div>
                    </div>
                    <div className="border-t border-gray-700 mt-8 pt-8 text-center text-gray-400">
                        <p>&copy; 2024 Maya Digital. Todos los derechos reservados.</p>
                    </div>
                </div>
            </footer>
        </div>
    );
}

// Componente FAQ Item
function FAQItem({ question, answer }) {
    const [isOpen, setIsOpen] = React.useState(false);

    return (
        <div className="bg-white rounded-lg shadow-md">
            <button
                className="w-full p-6 text-left flex justify-between items-center hover:bg-gray-50"
                onClick={() => setIsOpen(!isOpen)}
            >
                <span className="font-semibold text-gray-900">{question}</span>
                <span className={`transform transition-transform ${isOpen ? 'rotate-180' : ''}`}>
                    ↓
                </span>
            </button>
            {isOpen && (
                <div className="px-6 pb-6">
                    <p className="text-gray-600">{answer}</p>
                </div>
            )}
        </div>
    );
}
===== END frontend/src/pages/HotelLandingPage.js =====

===== BEGIN frontend/src/pages/HotelRegistrationPage.js =====
// frontend/src/pages/HotelRegistrationPage.js

import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';

export default function HotelRegistrationPage() {
    const [currentStep, setCurrentStep] = useState(1);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [error, setError] = useState('');
    const [success, setSuccess] = useState('');
    const navigate = useNavigate();

    // Estados para el formulario
    const [ownerData, setOwnerData] = useState({
        first_name: '',
        last_name: '',
        email: '',
        password: '',
        confirmPassword: '',
        phone: ''
    });

    const [hotelData, setHotelData] = useState({
        name: '',
        description: '',
        location: '',
        address: '',
        price: '',
        image_url: '',
        phone: '',
        email: '',
        website: '',
        rooms_available: '',
        amenities: [],
        policies: {
            check_in: '15:00',
            check_out: '11:00',
            cancellation_policy: '',
            pet_policy: '',
            smoking_policy: 'no_smoking'
        }
    });

    // Manejo de cambios en datos del propietario
    const handleOwnerChange = (e) => {
        const { name, value } = e.target;
        setOwnerData(prev => ({ ...prev, [name]: value }));
    };

    // Manejo de cambios en datos del hotel
    const handleHotelChange = (e) => {
        const { name, value } = e.target;
        setHotelData(prev => ({ ...prev, [name]: value }));
    };

    // Manejo de políticas
    const handlePolicyChange = (policy, value) => {
        setHotelData(prev => ({
            ...prev,
            policies: { ...prev.policies, [policy]: value }
        }));
    };

    // Manejo de amenidades
    const handleAmenityToggle = (amenity) => {
        setHotelData(prev => ({
            ...prev,
            amenities: prev.amenities.includes(amenity)
                ? prev.amenities.filter(a => a !== amenity)
                : [...prev.amenities, amenity]
        }));
    };

    // Navegación entre pasos
    const nextStep = () => {
        if (currentStep < 3) setCurrentStep(currentStep + 1);
    };

    const prevStep = () => {
        if (currentStep > 1) setCurrentStep(currentStep - 1);
    };

    // Validación del paso 1
    const validateStep1 = () => {
        if (!ownerData.first_name || !ownerData.last_name || !ownerData.email || !ownerData.password) {
            setError('Todos los campos marcados con * son obligatorios');
            return false;
        }
        if (ownerData.password !== ownerData.confirmPassword) {
            setError('Las contraseñas no coinciden');
            return false;
        }
        if (ownerData.password.length < 8) {
            setError('La contraseña debe tener al menos 8 caracteres');
            return false;
        }
        return true;
    };

    // Validación del paso 2
    const validateStep2 = () => {
        if (!hotelData.name || !hotelData.location || !hotelData.address || !hotelData.price) {
            setError('Todos los campos marcados con * son obligatorios');
            return false;
        }
        if (parseFloat(hotelData.price) <= 0) {
            setError('El precio debe ser mayor a 0');
            return false;
        }
        return true;
    };

    // Envío del formulario
    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);
        setError('');

        try {
            // Paso 1: Registrar usuario
            const userResponse = await fetch('/api/auth/register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    ...ownerData,
                    role: 'HotelOwner'
                })
            });

            const userData = await userResponse.json();

            if (!userResponse.ok) {
                throw new Error(userData.error || 'Error al registrar usuario');
            }

            // Paso 2: Crear hotel con el token obtenido
            const hotelResponse = await fetch('/api/hotels', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${userData.token}`
                },
                body: JSON.stringify({
                    ...hotelData,
                    price: parseFloat(hotelData.price),
                    rooms_available: parseInt(hotelData.rooms_available) || 1,
                    business_data: {
                        amenities: hotelData.amenities,
                        policies: hotelData.policies
                    }
                })
            });

            const hotelResult = await hotelResponse.json();

            if (!hotelResponse.ok) {
                throw new Error(hotelResult.error || 'Error al registrar hotel');
            }

            setSuccess('¡Registro exitoso! Tu hotel ha sido enviado para aprobación.');
            
            // Redirigir después de 3 segundos
            setTimeout(() => {
                navigate('/portal');
            }, 3000);

        } catch (err) {
            setError(err.message);
        } finally {
            setIsSubmitting(false);
        }
    };

    // Componente para indicador de pasos
    const StepIndicator = () => (
        <div className="mb-8">
            <div className="flex items-center justify-center space-x-4">
                {[1, 2, 3].map(step => (
                    <div key={step} className="flex items-center">
                        <div className={`w-10 h-10 rounded-full flex items-center justify-center text-sm font-bold ${
                            step <= currentStep ? 'bg-blue-600 text-white' : 'bg-gray-300 text-gray-600'
                        }`}>
                            {step}
                        </div>
                        {step < 3 && (
                            <div className={`w-20 h-1 mx-2 ${
                                step < currentStep ? 'bg-blue-600' : 'bg-gray-300'
                            }`} />
                        )}
                    </div>
                ))}
            </div>
            <div className="text-center mt-4 text-sm text-gray-600">
                Paso {currentStep} de 3: {
                    currentStep === 1 ? 'Información del Propietario' :
                    currentStep === 2 ? 'Información del Hotel' :
                    'Detalles y Políticas'
                }
            </div>
        </div>
    );

    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12">
            <div className="container mx-auto px-6 max-w-4xl">
                
                {/* Header */}
                <div className="text-center mb-8">
                    <h1 className="text-4xl font-bold text-gray-900 mb-4">
                        🏨 Únete a Maya Digital
                    </h1>
                    <p className="text-xl text-gray-600 mb-2">
                        Registra tu hotel y llega a miles de viajeros
                    </p>
                    <p className="text-gray-500">
                        Proceso simple y rápido • Comisión competitiva • Soporte 24/7
                    </p>
                </div>

                {/* Benefits Banner */}
                <div className="bg-gradient-to-r from-green-400 to-blue-500 text-white p-6 rounded-xl mb-8">
                    <div className="grid md:grid-cols-3 gap-4 text-center">
                        <div>
                            <div className="text-2xl mb-2">🌍</div>
                            <h3 className="font-bold">Alcance Global</h3>
                            <p className="text-sm">Miles de viajeros buscan tu hotel</p>
                        </div>
                        <div>
                            <div className="text-2xl mb-2">💰</div>
                            <h3 className="font-bold">Sin Costo Inicial</h3>
                            <p className="text-sm">Solo pagas cuando recibes reservas</p>
                        </div>
                        <div>
                            <div className="text-2xl mb-2">📈</div>
                            <h3 className="font-bold">Herramientas de Gestión</h3>
                            <p className="text-sm">Panel completo para administrar</p>
                        </div>
                    </div>
                </div>

                {/* Main Form */}
                <div className="bg-white rounded-2xl shadow-xl p-8">
                    
                    <StepIndicator />

                    {error && (
                        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
                            {error}
                        </div>
                    )}

                    {success && (
                        <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-6">
                            {success}
                        </div>
                    )}

                    <form onSubmit={handleSubmit}>
                        
                        {/* Paso 1: Información del Propietario */}
                        {currentStep === 1 && (
                            <Step1OwnerInfo 
                                data={ownerData}
                                onChange={handleOwnerChange}
                            />
                        )}

                        {/* Paso 2: Información del Hotel */}
                        {currentStep === 2 && (
                            <Step2HotelInfo 
                                data={hotelData}
                                onChange={handleHotelChange}
                            />
                        )}

                        {/* Paso 3: Detalles y Políticas */}
                        {currentStep === 3 && (
                            <Step3Policies 
                                data={hotelData}
                                onPolicyChange={handlePolicyChange}
                                onAmenityToggle={handleAmenityToggle}
                            />
                        )}

                        {/* Navegación */}
                        <div className="flex justify-between mt-8 pt-6 border-t">
                            <button
                                type="button"
                                onClick={prevStep}
                                disabled={currentStep === 1}
                                className="bg-gray-500 text-white px-6 py-3 rounded-lg disabled:bg-gray-300 disabled:cursor-not-allowed transition"
                            >
                                ← Anterior
                            </button>

                            {currentStep < 3 ? (
                                <button
                                    type="button"
                                    onClick={() => {
                                        setError('');
                                        if (currentStep === 1 && validateStep1()) {
                                            nextStep();
                                        } else if (currentStep === 2 && validateStep2()) {
                                            nextStep();
                                        }
                                    }}
                                    className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition"
                                >
                                    Siguiente →
                                </button>
                            ) : (
                                <button
                                    type="submit"
                                    disabled={isSubmitting}
                                    className="bg-green-600 text-white px-8 py-3 rounded-lg disabled:bg-green-300 disabled:cursor-not-allowed hover:bg-green-700 transition"
                                >
                                    {isSubmitting ? (
                                        <>
                                            <span className="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
                                            Registrando...
                                        </>
                                    ) : (
                                        '🚀 Registrar Hotel'
                                    )}
                                </button>
                            )}
                        </div>
                    </form>
                </div>

                {/* Footer */}
                <div className="text-center mt-8 text-gray-600">
                    <p>¿Ya tienes una cuenta? 
                        <Link to="/" className="text-blue-600 hover:underline ml-1">
                            Inicia sesión aquí
                        </Link>
                    </p>
                </div>
            </div>
        </div>
    );
}

// Componente Paso 1: Información del Propietario
function Step1OwnerInfo({ data, onChange }) {
    return (
        <div className="space-y-6">
            <div className="text-center mb-6">
                <h2 className="text-2xl font-bold text-gray-900">Información del Propietario</h2>
                <p className="text-gray-600">Comencemos con tus datos personales</p>
            </div>

            <div className="grid md:grid-cols-2 gap-6">
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Nombre *
                    </label>
                    <input
                        type="text"
                        name="first_name"
                        value={data.first_name}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="Tu nombre"
                        required
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Apellido *
                    </label>
                    <input
                        type="text"
                        name="last_name"
                        value={data.last_name}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="Tu apellido"
                        required
                    />
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                    Email *
                </label>
                <input
                    type="email"
                    name="email"
                    value={data.email}
                    onChange={onChange}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="tu@email.com"
                    required
                />
                <p className="text-xs text-gray-500 mt-1">
                    Este será tu email de acceso a la plataforma
                </p>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                    Teléfono
                </label>
                <input
                    type="tel"
                    name="phone"
                    value={data.phone}
                    onChange={onChange}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="+52 999 123 4567"
                />
            </div>

            <div className="grid md:grid-cols-2 gap-6">
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Contraseña *
                    </label>
                    <input
                        type="password"
                        name="password"
                        value={data.password}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="Mínimo 8 caracteres"
                        required
                        minLength="8"
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Confirmar Contraseña *
                    </label>
                    <input
                        type="password"
                        name="confirmPassword"
                        value={data.confirmPassword}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="Repite tu contraseña"
                        required
                    />
                </div>
            </div>
        </div>
    );
}

// Componente Paso 2: Información del Hotel
function Step2HotelInfo({ data, onChange }) {
    return (
        <div className="space-y-6">
            <div className="text-center mb-6">
                <h2 className="text-2xl font-bold text-gray-900">Información del Hotel</h2>
                <p className="text-gray-600">Cuéntanos sobre tu propiedad</p>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                    Nombre del Hotel *
                </label>
                <input
                    type="text"
                    name="name"
                    value={data.name}
                    onChange={onChange}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Hotel Paradise Maya"
                    required
                />
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descripción
                </label>
                <textarea
                    name="description"
                    value={data.description}
                    onChange={onChange}
                    rows="4"
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Describe tu hotel, qué lo hace especial, sus características principales..."
                />
            </div>

            <div className="grid md:grid-cols-2 gap-6">
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Ubicación *
                    </label>
                    <input
                        type="text"
                        name="location"
                        value={data.location}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="Tulum, Quintana Roo"
                        required
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Habitaciones Disponibles
                    </label>
                    <input
                        type="number"
                        name="rooms_available"
                        value={data.rooms_available}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="12"
                        min="1"
                    />
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                    Dirección Completa *
                </label>
                <input
                    type="text"
                    name="address"
                    value={data.address}
                    onChange={onChange}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Carretera Tulum-Bocapaila Km 8.5, Zona Hotelera"
                    required
                />
            </div>

            <div className="grid md:grid-cols-2 gap-6">
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Precio por Noche (MXN) *
                    </label>
                    <input
                        type="number"
                        name="price"
                        value={data.price}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="3500"
                        min="0"
                        step="0.01"
                        required
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Teléfono del Hotel
                    </label>
                    <input
                        type="tel"
                        name="phone"
                        value={data.phone}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="+52 984 123 4567"
                    />
                </div>
            </div>

            <div className="grid md:grid-cols-2 gap-6">
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Email del Hotel
                    </label>
                    <input
                        type="email"
                        name="email"
                        value={data.email}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="reservas@tuhotel.com"
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Sitio Web
                    </label>
                    <input
                        type="url"
                        name="website"
                        value={data.website}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="https://www.tuhotel.com"
                    />
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                    URL de Imagen Principal
                </label>
                <input
                    type="url"
                    name="image_url"
                    value={data.image_url}
                    onChange={onChange}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="https://ejemplo.com/imagen-hotel.jpg"
                />
                <p className="text-xs text-gray-500 mt-1">
                    Puedes usar imágenes de Unsplash, Pixabay u otros servicios gratuitos
                </p>
            </div>
        </div>
    );
}

// Componente Paso 3: Políticas y Amenidades
function Step3Policies({ data, onPolicyChange, onAmenityToggle }) {
    const commonAmenities = [
        'WiFi gratuito', 'Piscina', 'Gym', 'Spa', 'Restaurante', 'Bar',
        'Estacionamiento', 'Aire acondicionado', 'TV', 'Room service',
        'Lavandería', 'Recepción 24h', 'Desayuno incluido', 'Mascotas permitidas'
    ];

    return (
        <div className="space-y-8">
            <div className="text-center mb-6">
                <h2 className="text-2xl font-bold text-gray-900">Detalles y Políticas</h2>
                <p className="text-gray-600">Últimos detalles para completar tu perfil</p>
            </div>

            {/* Horarios */}
            <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Horarios</h3>
                <div className="grid md:grid-cols-2 gap-6">
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                            Check-in
                        </label>
                        <input
                            type="time"
                            value={data.policies.check_in}
                            onChange={(e) => onPolicyChange('check_in', e.target.value)}
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                            Check-out
                        </label>
                        <input
                            type="time"
                            value={data.policies.check_out}
                            onChange={(e) => onPolicyChange('check_out', e.target.value)}
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                    </div>
                </div>
            </div>

            {/* Amenidades */}
            <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Amenidades</h3>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                    {commonAmenities.map(amenity => (
                        <label key={amenity} className="flex items-center space-x-2 cursor-pointer">
                            <input
                                type="checkbox"
                                checked={data.amenities.includes(amenity)}
                                onChange={() => onAmenityToggle(amenity)}
                                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                            />
                            <span className="text-sm text-gray-700">{amenity}</span>
                        </label>
                    ))}
                </div>
            </div>

            {/* Políticas */}
            <div className="space-y-4">
                <h3 className="text-lg font-semibold text-gray-900">Políticas</h3>
                
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Política de Cancelación
                    </label>
                    <select
                        value={data.policies.cancellation_policy}
                        onChange={(e) => onPolicyChange('cancellation_policy', e.target.value)}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                        <option value="">Seleccionar política</option>
                        <option value="flexible">Flexible - Cancelación gratuita hasta 24h antes</option>
                        <option value="moderate">Moderada - Cancelación gratuita hasta 48h antes</option>
                        <option value="strict">Estricta - Cancelación gratuita hasta 7 días antes</option>
                    </select>
                </div>

                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Política de Mascotas
                    </label>
                    <select
                        value={data.policies.pet_policy}
                        onChange={(e) => onPolicyChange('pet_policy', e.target.value)}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                        <option value="">Seleccionar política</option>
                        <option value="allowed">Mascotas permitidas</option>
                        <option value="allowed_fee">Mascotas permitidas (con costo adicional)</option>
                        <option value="not_allowed">No se permiten mascotas</option>
                    </select>
                </div>
            </div>
        </div>
    );
}
===== END frontend/src/pages/HotelRegistrationPage.js =====

===== BEGIN frontend/src/pages/HotelesPage.js =====
// src/pages/HotelesPage.js - VERSIÓN MEJORADA

import { useState, useEffect } from 'react';
import heroImage from '../assets/hero-background.jpg';
import PredictiveSearch from '../components/PredictiveSearch';
import HotelOwnerBanner from '../components/HotelOwnerBanner';

export default function HotelesPage({ onReserveClick }) {
    const [hoteles, setHoteles] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchHoteles = async () => {
            try {
                setIsLoading(true);
                setError(null);
                
                console.log('🚀 Intentando cargar hoteles desde /api/hoteles...');
                
                const response = await fetch('/api/hoteles');
                
                console.log('📡 Respuesta recibida:', {
                    status: response.status,
                    statusText: response.statusText,
                    ok: response.ok,
                    url: response.url
                });
                
                // Verificar si la respuesta es exitosa
                if (!response.ok) {
                    throw new Error(`Error del servidor: ${response.status} ${response.statusText}`);
                }
                
                // Verificar el tipo de contenido
                const contentType = response.headers.get('content-type');
                console.log('📋 Content-Type:', contentType);
                
                if (!contentType || !contentType.includes('application/json')) {
                    // Si no es JSON, obtener el texto para debug
                    const text = await response.text();
                    console.error('❌ Respuesta no es JSON. Primeros 500 caracteres:', text.substring(0, 500));
                    throw new Error('El servidor no devolvió JSON válido. Verifica que el backend esté corriendo en el puerto 8080.');
                }
                
                const data = await response.json();
                console.log('✅ Hoteles cargados exitosamente:', data);
                
                // Verificar que data es un array
                if (Array.isArray(data)) {
                    setHoteles(data);
                } else {
                    console.warn('⚠️ Los datos recibidos no son un array:', data);
                    setHoteles([]);
                }
                
            } catch (error) {
                console.error("❌ Error completo:", error);
                setError(error.message);
            } finally {
                setIsLoading(false);
            }
        };

        fetchHoteles();
    }, []);

    const handleRetry = () => {
        setError(null);
        setIsLoading(true);
        window.location.reload();
    };

    return (
        <section>
            {/* ✨ NUEVO BANNER PARA DUEÑOS DE HOTELES */}
            <HotelOwnerBanner />
            
            {/* Hero Section */}
            <div className="relative text-white min-h-[65vh]">
                <img 
                    src={heroImage} 
                    alt="Vista de un resort tropical"
                    className="absolute inset-0 w-full h-full object-cover" 
                />
                <div className="absolute inset-0 bg-black/60"></div>
                <div className="relative z-10 h-full min-h-[65vh] flex flex-col items-center justify-center text-center px-4">
                    <h1 className="text-5xl md:text-7xl font-extrabold mb-4 drop-shadow-lg">
                        Descubre el Alma del Mundo Maya
                    </h1>
                    <p className="text-xl md:text-2xl mb-8 drop-shadow-md">
                        Tu viaje comienza aquí. Reserva, explora y vive experiencias únicas.
                    </p>
                    <PredictiveSearch />
                </div>
            </div>
            
            {/* Contenido de Hoteles */}
            <div className="container mx-auto px-6 py-16">
                <h2 className="text-4xl font-bold mb-2 text-center">Casa Maya</h2>
                <p className="text-center text-lg text-gray-600 mb-10">Hoteles con Encanto</p>
                
                {/* Estado de Carga */}
                {isLoading && (
                    <div className="text-center py-12">
                        <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mb-4"></div>
                        <p className="text-gray-600">Cargando hoteles...</p>
                        <p className="text-sm text-gray-500 mt-2">
                            Conectando con el servidor backend...
                        </p>
                    </div>
                )}

                {/* Estado de Error */}
                {error && (
                    <div className="text-center py-12">
                        <div className="bg-red-100 border border-red-400 text-red-700 px-6 py-4 rounded-lg mb-4 max-w-2xl mx-auto">
                            <h3 className="font-bold mb-2 text-lg">❌ Error de Conexión</h3>
                            <p className="mb-4">{error}</p>
                            
                            <div className="bg-red-50 p-4 rounded text-left text-sm">
                                <p className="font-semibold mb-2">🔧 Pasos para solucionar:</p>
                                <ol className="list-decimal list-inside space-y-1">
                                    <li>Verificar que el servidor backend esté ejecutándose:
                                        <code className="bg-gray-800 text-green-400 px-2 py-1 rounded ml-2 text-xs">
                                            cd backend && cargo run
                                        </code>
                                    </li>
                                    <li>El backend debe estar corriendo en <strong>http://127.0.0.1:8080</strong></li>
                                    <li>Verificar que veas el mensaje: "🚀 Servidor de Maya Digital iniciado"</li>
                                    <li>Asegúrate de que el proxy esté configurado en package.json</li>
                                </ol>
                            </div>
                            
                            <button 
                                onClick={handleRetry}
                                className="mt-4 bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700 transition"
                            >
                                🔄 Reintentar
                            </button>
                        </div>
                    </div>
                )}

                {/* Lista de Hoteles */}
                {!isLoading && !error && (
                    <>
                        {hoteles.length === 0 ? (
                            <div className="text-center py-12">
                                <div className="text-6xl mb-4">🏨</div>
                                <h3 className="text-2xl font-bold mb-2">No hay hoteles disponibles</h3>
                                <p className="text-gray-600 mb-4">
                                    Actualmente no hay hoteles aprobados en el sistema.
                                </p>
                                <p className="text-sm text-gray-500">
                                    Los hoteles aparecerán aquí una vez que sean aprobados por un administrador.
                                </p>
                            </div>
                        ) : (
                            <>
                                <div className="text-center mb-8">
                                    <p className="text-green-600 font-medium">
                                        ✅ {hoteles.length} hotel{hoteles.length !== 1 ? 'es' : ''} encontrado{hoteles.length !== 1 ? 's' : ''}
                                    </p>
                                </div>
                                
                                <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                                    {hoteles.map(hotel => (
                                        <div key={hotel.id} className="card bg-white rounded-xl shadow-lg overflow-hidden">
                                            <img 
                                                src={hotel.image || 'https://via.placeholder.com/400x300?text=Sin+Imagen'} 
                                                alt={hotel.name} 
                                                className="w-full h-56 object-cover"
                                                onError={(e) => {
                                                    e.target.src = 'https://via.placeholder.com/400x300?text=Sin+Imagen';
                                                }}
                                            />
                                            <div className="p-6">
                                                <h3 className="text-2xl font-bold mb-2">{hotel.name}</h3>
                                                <p className="text-gray-600 mb-4">📍 {hotel.location}</p>
                                                <div className="flex justify-between items-center">
                                                    <span className="text-xl font-bold" style={{ color: 'var(--theme-primary)' }}>
                                                        ${hotel.price} MXN
                                                    </span>
                                                    <button 
                                                        onClick={() => onReserveClick(hotel)} 
                                                        className="btn-primary font-bold py-2 px-4 rounded-full hover:transform hover:scale-105 transition"
                                                    >
                                                        Reservar
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </>
                        )}
                    </>
                )}
            </div>
        </section>
    );
}
===== END frontend/src/pages/HotelesPage.js =====

===== BEGIN frontend/src/pages/MisReservasPage.js =====
// src/pages/MisReservasPage.js

import { useState, useEffect } from 'react';

export default function MisReservasPage() {
    const [reservas, setReservas] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        fetchReservas();
    }, []);

    const fetchReservas = async () => {
        try {
            const token = localStorage.getItem('auth_token');
            if (!token) {
                setError('Debes iniciar sesión para ver tus reservas');
                setIsLoading(false);
                return;
            }

            const response = await fetch('/api/bookings/my-bookings', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (response.ok) {
                const data = await response.json();
                setReservas(data.bookings || []);
            } else {
                setError('Error al cargar las reservas');
            }
        } catch (error) {
            console.error('Error:', error);
            setError('Error de conexión');
        } finally {
            setIsLoading(false);
        }
    };

    const getStatusColor = (status) => {
        switch (status) {
            case 'confirmed': return 'bg-green-100 text-green-800';
            case 'pending': return 'bg-yellow-100 text-yellow-800';
            case 'cancelled': return 'bg-red-100 text-red-800';
            default: return 'bg-gray-100 text-gray-800';
        }
    };

    const getStatusText = (status) => {
        switch (status) {
            case 'confirmed': return 'Confirmada';
            case 'pending': return 'Pendiente';
            case 'cancelled': return 'Cancelada';
            default: return status;
        }
    };

    const formatDate = (dateString) => {
        const date = new Date(dateString);
        return date.toLocaleDateString('es-ES', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    };

    if (isLoading) {
        return (
            <div className="container mx-auto px-6 py-16">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                    <p className="text-gray-600">Cargando tus reservas...</p>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="container mx-auto px-6 py-16">
                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded text-center">
                    <p>{error}</p>
                </div>
            </div>
        );
    }

    return (
        <div className="container mx-auto px-6 py-16">
            <div className="max-w-4xl mx-auto">
                <h1 className="text-4xl font-bold mb-8 text-center">Mis Reservas</h1>
                
                {reservas.length === 0 ? (
                    <div className="text-center py-12">
                        <div className="text-6xl mb-4">📅</div>
                        <h2 className="text-2xl font-bold mb-2">No tienes reservas aún</h2>
                        <p className="text-gray-600 mb-6">¡Explora nuestros hoteles y haz tu primera reserva!</p>
                        <a href="/" className="btn-primary inline-block px-6 py-3 rounded-full font-bold">
                            Explorar Hoteles
                        </a>
                    </div>
                ) : (
                    <div className="space-y-6">
                        {reservas.map((reserva) => (
                            <div key={reserva.id} className="bg-white rounded-xl shadow-lg overflow-hidden">
                                <div className="p-6">
                                    <div className="flex justify-between items-start mb-4">
                                        <div>
                                            <h3 className="text-2xl font-bold">{reserva.hotel_name}</h3>
                                            <p className="text-gray-600">{reserva.hotel_location}</p>
                                            <p className="text-sm text-gray-500">Referencia: {reserva.booking_reference}</p>
                                        </div>
                                        <div className="text-right">
                                            <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(reserva.status)}`}>
                                                {getStatusText(reserva.status)}
                                            </span>
                                        </div>
                                    </div>

                                    <div className="grid md:grid-cols-2 gap-6">
                                        <div>
                                            <h4 className="font-semibold mb-2">Detalles de la Reserva</h4>
                                            <div className="space-y-2 text-sm">
                                                <div className="flex justify-between">
                                                    <span>Check-in:</span>
                                                    <span className="font-medium">{formatDate(reserva.check_in)}</span>
                                                </div>
                                                <div className="flex justify-between">
                                                    <span>Check-out:</span>
                                                    <span className="font-medium">{formatDate(reserva.check_out)}</span>
                                                </div>
                                                <div className="flex justify-between">
                                                    <span>Huéspedes:</span>
                                                    <span className="font-medium">{reserva.guests}</span>
                                                </div>
                                                <div className="flex justify-between">
                                                    <span>Habitaciones:</span>
                                                    <span className="font-medium">{reserva.rooms}</span>
                                                </div>
                                                {reserva.special_requests && (
                                                    <div className="pt-2 border-t">
                                                        <span className="font-medium">Solicitudes especiales:</span>
                                                        <p className="text-gray-600 mt-1">{reserva.special_requests}</p>
                                                    </div>
                                                )}
                                            </div>
                                        </div>

                                        <div>
                                            <h4 className="font-semibold mb-2">Resumen de Pago</h4>
                                            <div className="space-y-2 text-sm">
                                                {reserva.addon_services && reserva.addon_services.length > 0 && (
                                                    <div>
                                                        <span className="font-medium">Extras incluidos:</span>
                                                        {reserva.addon_services.map((addon, index) => (
                                                            <div key={index} className="flex justify-between ml-2">
                                                                <span>• {addon.name}</span>
                                                                <span>+${addon.price}</span>
                                                            </div>
                                                        ))}
                                                    </div>
                                                )}
                                                <div className="flex justify-between font-bold text-lg pt-2 border-t">
                                                    <span>Total:</span>
                                                    <span className="text-blue-600">${reserva.total_price.toFixed(2)} MXN</span>
                                                </div>
                                                <div className="flex justify-between text-sm">
                                                    <span>Estado del pago:</span>
                                                    <span className={`font-medium ${
                                                        reserva.payment_status === 'paid' ? 'text-green-600' : 
                                                        reserva.payment_status === 'pending' ? 'text-yellow-600' : 
                                                        'text-red-600'
                                                    }`}>
                                                        {reserva.payment_status === 'paid' ? 'Pagado' : 
                                                         reserva.payment_status === 'pending' ? 'Pendiente' : 
                                                         'Falló'}
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div className="mt-6 pt-4 border-t flex justify-between items-center">
                                        <div className="text-sm text-gray-500">
                                            Reserva creada el {new Date(reserva.created_at).toLocaleDateString('es-ES')}
                                        </div>
                                        <div className="space-x-2">
                                            {reserva.status === 'pending' && (
                                                <button className="bg-red-500 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-red-600 transition-colors">
                                                    Cancelar
                                                </button>
                                            )}
                                            <button className="bg-blue-500 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-blue-600 transition-colors">
                                                Ver Detalles
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                )}
            </div>
        </div>
    );
}
===== END frontend/src/pages/MisReservasPage.js =====

===== BEGIN frontend/src/pages/PortalPage.js =====
// pages/PortalPage.js - VERSIÓN CORREGIDA (HOOKS ANTES DE RETURNS)

import React, { useState, useEffect } from 'react';
import { Navigate, Link } from 'react-router-dom';

function PortalPage({ userData, isLoggedIn }) {
    // 🔥 TODOS LOS HOOKS DEBEN IR AL INICIO ANTES DE CUALQUIER RETURN
    const [hotels, setHotels] = useState([]);
    const [businesses, setBusinesses] = useState([]); // 🔥 NUEVO: Para restaurantes
    const [bookings, setBookings] = useState([]);
    const [loading, setLoading] = useState(true);
    const [activeTab, setActiveTab] = useState('overview');
    const [error, setError] = useState(null);

    // 🔥 FUNCIÓN PARA CARGAR HOTELES
    const fetchHotels = async () => {
        if (!userData || (userData.role !== 'HotelOwner' && userData.role !== 'Admin')) return;
        
        try {
            const token = localStorage.getItem('auth_token');
            const response = await fetch('http://localhost:8080/api/hotels/my-hotels', {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const data = await response.json();
                setHotels(data);
                console.log('✅ Hoteles cargados:', data);
            } else {
                console.error('Error cargando hoteles:', response.status);
            }
        } catch (error) {
            console.error('Error cargando hoteles:', error);
            setError('Error al cargar hoteles');
        }
    };

    // 🔥 FUNCIÓN PARA CARGAR NEGOCIOS/RESTAURANTES
    const fetchBusinesses = async () => {
        if (!userData || (userData.role !== 'BusinessOwner' && userData.role !== 'Admin')) return;
        
        try {
            const token = localStorage.getItem('auth_token');
            const response = await fetch('http://localhost:8080/api/businesses/my-businesses', {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const data = await response.json();
                setBusinesses(data);
                console.log('✅ Negocios cargados:', data);
            } else {
                console.error('Error cargando negocios:', response.status);
            }
        } catch (error) {
            console.error('Error cargando negocios:', error);
            setError('Error al cargar negocios');
        }
    };

    // 🔥 FUNCIÓN PARA CARGAR RESERVAS
    const fetchBookings = async () => {
        if (!userData) return;
        
        try {
            const token = localStorage.getItem('auth_token');
            const response = await fetch('http://localhost:8080/api/bookings/my-bookings', {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const data = await response.json();
                setBookings(data);
                console.log('✅ Reservas cargadas:', data);
            }
        } catch (error) {
            console.error('Error cargando reservas:', error);
        }
    };

    // 🔥 HOOK useEffect DEBE IR DESPUÉS DE LAS FUNCIONES PERO ANTES DE LOS RETURNS
    useEffect(() => {
        // Solo ejecutar si tenemos userData válido
        if (!userData) return;

        const loadData = async () => {
            setLoading(true);
            setError(null);
            
            await Promise.all([
                fetchHotels(),
                fetchBusinesses(), // 🔥 NUEVO
                fetchBookings()
            ]);
            
            setLoading(false);
        };

        loadData();
    }, [userData]); // Dependencia correcta

    // 🔥 AHORA SÍ PODEMOS USAR RETURNS CONDICIONALES (DESPUÉS DE TODOS LOS HOOKS)
    // Verificar autenticación
    if (!isLoggedIn || !userData) {
        return <Navigate to="/" replace />;
    }

    // Verificar que sea hotel owner o business owner
    const isHotelOwner = userData.role === 'HotelOwner';
    const isBusinessOwner = userData.role === 'BusinessOwner';
    const canAccessPortal = isHotelOwner || isBusinessOwner || userData.role === 'Admin';

    if (!canAccessPortal) {
        return <Navigate to="/" replace />;
    }

    if (loading) {
        return (
            <div className="min-h-screen bg-gray-100 flex justify-center items-center">
                <div className="bg-white p-8 rounded-lg shadow">
                    <div className="text-xl">Cargando portal...</div>
                </div>
            </div>
        );
    }

    // 🔥 DETERMINAR QUE TABS MOSTRAR SEGÚN EL ROL
    const getAvailableTabs = () => {
        const tabs = [{ id: 'overview', name: 'Resumen', icon: '📊' }];
        
        if (isHotelOwner || userData.role === 'Admin') {
            tabs.push({ id: 'hotels', name: 'Mis Hoteles', icon: '🏨' });
        }
        
        if (isBusinessOwner || userData.role === 'Admin') {
            tabs.push({ id: 'businesses', name: 'Mis Restaurantes', icon: '🍽️' });
        }
        
        tabs.push({ id: 'bookings', name: 'Reservas', icon: '📅' });
        
        return tabs;
    };

    return (
        <div className="min-h-screen bg-gray-100">
            {/* Header */}
            <div className="bg-white shadow">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <div className="flex justify-between items-center py-6">
                        <div>
                            <h1 className="text-2xl lg:text-3xl font-bold text-gray-900">
                                Portal de {isHotelOwner ? 'Hoteles' : 'Restaurantes'}
                            </h1>
                            <p className="text-gray-600">
                                Bienvenido, {userData.first_name} {userData.last_name}
                            </p>
                        </div>
                        
                        {/* Botón para agregar nuevo */}
                        <div className="flex space-x-4">
                            {isHotelOwner && (
                                <Link
                                    to="/portal/nuevo-hotel"
                                    className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium"
                                >
                                    + Nuevo Hotel
                                </Link>
                            )}
                            {isBusinessOwner && (
                                <Link
                                    to="/registro-restaurante"
                                    className="bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition-colors font-medium"
                                >
                                    + Nuevo Restaurante
                                </Link>
                            )}
                        </div>
                    </div>

                    {/* Tabs */}
                    <div className="flex space-x-8 border-b">
                        {getAvailableTabs().map((tab) => (
                            <button
                                key={tab.id}
                                onClick={() => setActiveTab(tab.id)}
                                className={`py-4 px-2 border-b-2 font-medium text-sm ${
                                    activeTab === tab.id
                                        ? 'border-blue-500 text-blue-600'
                                        : 'border-transparent text-gray-500 hover:text-gray-700'
                                }`}
                            >
                                {tab.icon} {tab.name}
                            </button>
                        ))}
                    </div>
                </div>
            </div>

            {/* Content */}
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                {error && (
                    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
                        {error}
                    </div>
                )}

                {activeTab === 'overview' && (
                    <OverviewTab 
                        hotels={hotels} 
                        businesses={businesses} 
                        bookings={bookings} 
                        userRole={userData.role}
                    />
                )}
                {activeTab === 'hotels' && <HotelsTab hotels={hotels} />}
                {activeTab === 'businesses' && <BusinessesTab businesses={businesses} />}
                {activeTab === 'bookings' && <BookingsTab bookings={bookings} />}
            </div>
        </div>
    );
}

// 🔥 COMPONENTE OVERVIEW ACTUALIZADO
function OverviewTab({ hotels, businesses, bookings, userRole }) {
    const totalHotels = hotels.length;
    const totalBusinesses = businesses.length;
    const totalBookings = bookings.length;
    const pendingHotels = hotels.filter(h => h.status === 'pending').length;
    const pendingBusinesses = businesses.filter(b => b.status === 'pending').length;

    return (
        <div className="space-y-6">
            {/* Métricas */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                {(userRole === 'HotelOwner' || userRole === 'Admin') && (
                    <>
                        <MetricCard title="Total Hoteles" value={totalHotels} color="blue" />
                        <MetricCard title="Hoteles Pendientes" value={pendingHotels} color="yellow" />
                    </>
                )}
                
                {(userRole === 'BusinessOwner' || userRole === 'Admin') && (
                    <>
                        <MetricCard title="Total Restaurantes" value={totalBusinesses} color="red" />
                        <MetricCard title="Restaurantes Pendientes" value={pendingBusinesses} color="orange" />
                    </>
                )}
                
                <MetricCard title="Total Reservas" value={totalBookings} color="green" />
            </div>

            {/* Estado de aprobación */}
            <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-semibold mb-4">Estado de Aprobación</h3>
                
                {userRole === 'HotelOwner' && hotels.length === 0 && (
                    <div className="text-center py-8">
                        <p className="text-gray-500 mb-4">No tienes hoteles registrados</p>
                        <Link
                            to="/portal/nuevo-hotel"
                            className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700"
                        >
                            Registrar Primer Hotel
                        </Link>
                    </div>
                )}

                {userRole === 'BusinessOwner' && businesses.length === 0 && (
                    <div className="text-center py-8">
                        <p className="text-gray-500 mb-4">No tienes restaurantes registrados</p>
                        <Link
                            to="/registro-restaurante"
                            className="bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700"
                        >
                            Registrar Primer Restaurante
                        </Link>
                    </div>
                )}
            </div>
        </div>
    );
}

// 🔥 NUEVO COMPONENTE PARA PESTAÑA DE RESTAURANTES
function BusinessesTab({ businesses }) {
    if (businesses.length === 0) {
        return (
            <div className="bg-white rounded-lg shadow p-8 text-center">
                <h3 className="text-xl font-semibold mb-4">No tienes restaurantes registrados</h3>
                <p className="text-gray-600 mb-6">Registra tu primer restaurante para comenzar</p>
                <Link
                    to="/registro-restaurante"
                    className="bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition-colors"
                >
                    + Registrar Restaurante
                </Link>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold">Mis Restaurantes</h2>
                <Link
                    to="/registro-restaurante"
                    className="bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition-colors"
                >
                    + Nuevo Restaurante
                </Link>
            </div>

            <div className="grid gap-6">
                {businesses.map((business) => (
                    <div key={business.id} className="bg-white rounded-lg shadow p-6">
                        <div className="flex justify-between items-start">
                            <div className="flex-1">
                                <h3 className="text-xl font-semibold mb-2">{business.name}</h3>
                                <p className="text-gray-600 mb-2">{business.description}</p>
                                <p className="text-sm text-gray-500">
                                    📍 {business.location} • {business.address}
                                </p>
                                <p className="text-sm text-gray-500">
                                    📞 {business.phone} • ✉️ {business.email}
                                </p>
                            </div>
                            
                            <div className="flex flex-col items-end space-y-2">
                                <StatusBadge status={business.status} />
                                <div className="flex space-x-2">
                                    <Link
                                        to={`/businesses/${business.id}/edit`}
                                        className="text-blue-600 hover:text-blue-800 text-sm"
                                    >
                                        Editar
                                    </Link>
                                </div>
                            </div>
                        </div>
                        
                        {business.status === 'pending' && (
                            <div className="mt-4 p-4 bg-yellow-50 rounded-lg">
                                <p className="text-yellow-800 text-sm">
                                    ⏳ Tu restaurante está pendiente de aprobación por el administrador
                                </p>
                            </div>
                        )}
                    </div>
                ))}
            </div>
        </div>
    );
}

// Componentes existentes
function HotelsTab({ hotels }) {
    if (hotels.length === 0) {
        return (
            <div className="bg-white rounded-lg shadow p-8 text-center">
                <h3 className="text-xl font-semibold mb-4">No tienes hoteles registrados</h3>
                <p className="text-gray-600 mb-6">Registra tu primer hotel para comenzar</p>
                <Link
                    to="/portal/nuevo-hotel"
                    className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
                >
                    + Registrar Hotel
                </Link>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold">Mis Hoteles</h2>
                <Link
                    to="/portal/nuevo-hotel"
                    className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
                >
                    + Nuevo Hotel
                </Link>
            </div>

            <div className="grid gap-6">
                {hotels.map((hotel) => (
                    <div key={hotel.id} className="bg-white rounded-lg shadow p-6">
                        <div className="flex justify-between items-start">
                            <div className="flex-1">
                                <h3 className="text-xl font-semibold mb-2">{hotel.name}</h3>
                                <p className="text-gray-600 mb-2">{hotel.description}</p>
                                <p className="text-sm text-gray-500">
                                    📍 {hotel.location} • {hotel.address}
                                </p>
                                <p className="text-lg font-bold text-green-600 mt-2">
                                    ${hotel.price} MXN/noche
                                </p>
                            </div>
                            
                            <div className="flex flex-col items-end space-y-2">
                                <StatusBadge status={hotel.status} />
                                <div className="flex space-x-2">
                                    <Link
                                        to={`/portal/editar-hotel/${hotel.id}`}
                                        className="text-blue-600 hover:text-blue-800 text-sm"
                                    >
                                        Editar
                                    </Link>
                                </div>
                            </div>
                        </div>
                        
                        {hotel.status === 'pending' && (
                            <div className="mt-4 p-4 bg-yellow-50 rounded-lg">
                                <p className="text-yellow-800 text-sm">
                                    ⏳ Tu hotel está pendiente de aprobación por el administrador
                                </p>
                            </div>
                        )}
                    </div>
                ))}
            </div>
        </div>
    );
}

function BookingsTab({ bookings }) {
    if (bookings.length === 0) {
        return (
            <div className="bg-white rounded-lg shadow p-8 text-center">
                <h3 className="text-xl font-semibold mb-4">No tienes reservas</h3>
                <p className="text-gray-600">Las reservas de tus clientes aparecerán aquí</p>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            <h2 className="text-2xl font-bold">Reservas de mis Servicios</h2>
            
            <div className="bg-white rounded-lg shadow overflow-hidden">
                <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Cliente
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Servicio
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Fecha
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Monto
                                </th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Estado
                                </th>
                            </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                            {bookings.map((booking) => (
                                <tr key={booking.id}>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        {booking.customer_name || booking.customer_email}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        {booking.service_name}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        {new Date(booking.booking_date).toLocaleDateString()}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        ${booking.total_amount} MXN
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap">
                                        <StatusBadge status={booking.status} />
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
}

// Componente para métricas
function MetricCard({ title, value, color = "blue" }) {
    const colorClasses = {
        blue: "border-blue-500 text-blue-600",
        green: "border-green-500 text-green-600",
        red: "border-red-500 text-red-600",
        yellow: "border-yellow-500 text-yellow-600",
        orange: "border-orange-500 text-orange-600"
    };

    return (
        <div className={`bg-white rounded-lg shadow p-6 border-l-4 ${colorClasses[color]}`}>
            <h3 className="text-sm font-medium text-gray-500 uppercase tracking-wide">
                {title}
            </h3>
            <p className="mt-2 text-3xl font-bold text-gray-900">
                {value}
            </p>
        </div>
    );
}

// Componente para badges de estado
function StatusBadge({ status }) {
    const getStatusConfig = (status) => {
        switch (status) {
            case 'approved':
                return { text: 'Aprobado', className: 'bg-green-100 text-green-800' };
            case 'pending':
                return { text: 'Pendiente', className: 'bg-yellow-100 text-yellow-800' };
            case 'rejected':
                return { text: 'Rechazado', className: 'bg-red-100 text-red-800' };
            case 'confirmed':
                return { text: 'Confirmada', className: 'bg-green-100 text-green-800' };
            case 'cancelled':
                return { text: 'Cancelada', className: 'bg-red-100 text-red-800' };
            default:
                return { text: status, className: 'bg-gray-100 text-gray-800' };
        }
    };

    const config = getStatusConfig(status);
    
    return (
        <span className={`px-2 py-1 text-xs font-semibold rounded-full ${config.className}`}>
            {config.text}
        </span>
    );
}

export default PortalPage;
===== END frontend/src/pages/PortalPage.js =====

===== BEGIN frontend/src/pages/ProductDetailPage.js =====
// src/pages/ProductDetailPage.js

import { useState, useEffect } from 'react';
import { useLocation, Link } from 'react-router-dom';

export default function ProductDetailPage() {
    const location = useLocation();
    const { product } = location.state; // Obtenemos el producto enviado desde la página anterior

    const [activeImage, setActiveImage] = useState('');

    useEffect(() => {
        if (product && product.images && product.images.length > 0) {
            setActiveImage(product.images[0]);
        }
    }, [product]);

    if (!product) {
        return <div className="text-center py-20">Producto no encontrado.</div>;
    }

    return (
        <div className="container mx-auto px-6 py-16">
            <div className="mb-8">
                <Link to="/artesanos" className="text-theme-primary hover:underline">
                    &larr; Volver a Artesanos
                </Link>
            </div>
            <div className="grid md:grid-cols-2 gap-8 md:gap-12 items-start">
                {/* Columna de la Galería de Imágenes */}
                <div>
                    <div className="aspect-square bg-gray-100 rounded-lg mb-4">
                        <img src={activeImage} alt={product.name} className="w-full h-full object-cover rounded-lg shadow-lg" />
                    </div>
                    <div className="flex gap-2 justify-center">
                        {product.images.map((imgUrl, index) => (
                            <div key={index} className={`w-20 h-20 rounded-md cursor-pointer border-2 transition-all ${activeImage === imgUrl ? 'border-theme-primary' : 'border-transparent hover:border-gray-300'}`} onClick={() => setActiveImage(imgUrl)}>
                                <img src={imgUrl} alt={`Thumbnail ${index + 1}`} className="w-full h-full object-cover rounded" />
                            </div>
                        ))}
                    </div>
                </div>

                {/* Columna de Información del Producto */}
                <div>
                    <h1 className="text-4xl md:text-5xl font-bold">{product.name}</h1>
                    <p className="text-lg text-gray-500 mb-4">Por {product.artisan}</p>
                    <p className="text-3xl font-bold my-6 text-theme-primary">${product.price} MXN</p>
                    <p className="text-gray-700 mb-6 leading-relaxed">{product.desc}</p>
                    <button onClick={() => alert('Añadido al carrito (simulación)')} className="btn-secondary w-full max-w-sm font-bold py-3 rounded-full">
                        Añadir al Carrito
                    </button>
                </div>
            </div>
        </div>
    );
}
===== END frontend/src/pages/ProductDetailPage.js =====

===== BEGIN frontend/src/pages/RestaurantLandingPage.js =====
// frontend/src/pages/RestaurantLandingPage.js

import React from 'react';
import { Link } from 'react-router-dom';

export default function RestaurantLandingPage() {
    const benefits = [
        {
            icon: '🍽️',
            title: 'Más Comensales',
            description: 'Atrae turistas y locales interesados en la auténtica gastronomía mexicana'
        },
        {
            icon: '📱',
            title: 'Pedidos Online',
            description: 'Sistema integrado de reservas y pedidos para llevar con notificaciones en tiempo real'
        },
        {
            icon: '📈',
            title: 'Aumenta Ventas',
            description: 'Nuestros partners incrementan sus ventas hasta en un 50% durante temporada alta'
        },
        {
            icon: '🎯',
            title: 'Marketing Gastronómico',
            description: 'Promocionamos tu restaurante a foodlovers y turistas gastronómicos'
        },
        {
            icon: '💰',
            title: 'Sin Costo Inicial',
            description: 'Únete gratis y solo paga una pequeña comisión cuando recibas pedidos'
        },
        {
            icon: '🏆',
            title: 'Soporte Culinario',
            description: 'Equipo especializado en gastronomía para ayudarte a destacar tu cocina'
        }
    ];

    const steps = [
        {
            number: '1',
            title: 'Regístrate',
            description: 'Completa el formulario con la información de tu restaurante y menú',
            icon: '📝'
        },
        {
            number: '2',
            title: 'Verificación',
            description: 'Revisamos tu restaurante y menú (24-48 horas)',
            icon: '✅'
        },
        {
            number: '3',
            title: 'Empieza a Vender',
            description: 'Tu restaurante aparece en nuestra plataforma y empiezas a recibir pedidos',
            icon: '🚀'
        }
    ];

    const testimonials = [
        {
            name: 'Elena Martínez',
            restaurant: 'La Cocina de Abuela, Mérida',
            quote: 'Maya Digital nos trajo clientes que realmente aprecian la cocina yucateca tradicional. Las ventas aumentaron 45%.',
            rating: 5
        },
        {
            name: 'Chef Roberto Sánchez',
            restaurant: 'Corazón de Jade, Campeche',
            quote: 'La plataforma es perfecta para restaurantes de alta cocina. Los clientes vienen buscando experiencias gastronómicas únicas.',
            rating: 5
        },
        {
            name: 'María José Pech',
            restaurant: 'El Fogón del Mayab, Valladolid',
            quote: 'El sistema de pedidos es muy fácil de usar y el soporte técnico es excelente. Lo recomiendo mucho.',
            rating: 5
        }
    ];

    const restaurantTypes = [
        { name: 'Cocina Tradicional', icon: '🌮' },
        { name: 'Alta Cocina', icon: '🍷' },
        { name: 'Mariscos', icon: '🦐' },
        { name: 'Cocina de Autor', icon: '👨‍🍳' },
        { name: 'Antojitos', icon: '🌯' },
        { name: 'Café & Postres', icon: '☕' }
    ];

    return (
        <div className="min-h-screen bg-white">
            
            {/* Hero Section */}
            <section className="bg-gradient-to-br from-red-600 via-orange-600 to-yellow-600 text-white">
                <div className="container mx-auto px-6 py-20">
                    <div className="grid lg:grid-cols-2 gap-12 items-center">
                        <div>
                            <h1 className="text-4xl lg:text-6xl font-bold mb-6 leading-tight">
                                Lleva tu Restaurante al 
                                <span className="text-yellow-300"> Siguiente Nivel</span>
                            </h1>
                            <p className="text-xl lg:text-2xl mb-8 text-orange-100">
                                Únete a Maya Digital y conecta con amantes de la gastronomía mexicana 
                                que buscan experiencias culinarias auténticas.
                            </p>
                            
                            <div className="flex flex-col sm:flex-row gap-4 mb-8">
                                <Link 
                                    to="/registro-restaurante"
                                    className="bg-yellow-400 text-red-900 px-8 py-4 rounded-lg font-bold text-lg hover:bg-yellow-300 transition text-center"
                                >
                                    🍴 Registrar Mi Restaurante
                                </Link>
                                <a 
                                    href="#como-funciona"
                                    className="border-2 border-white text-white px-8 py-4 rounded-lg font-bold text-lg hover:bg-white hover:text-red-900 transition text-center"
                                >
                                    📖 Cómo Funciona
                                </a>
                            </div>

                            <div className="flex items-center space-x-6 text-orange-100">
                                <div className="flex items-center space-x-2">
                                    <span className="text-yellow-300">✓</span>
                                    <span>Sin costo inicial</span>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <span className="text-yellow-300">✓</span>
                                    <span>Configuración en 24h</span>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <span className="text-yellow-300">✓</span>
                                    <span>Pedidos online</span>
                                </div>
                            </div>
                        </div>

                        <div className="hidden lg:block">
                            <div className="relative">
                                <img 
                                    src="https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?q=80&w=2070&auto=format&fit=crop" 
                                    alt="Restaurante mexicano elegante"
                                    className="rounded-2xl shadow-2xl"
                                />
                                <div className="absolute -bottom-6 -left-6 bg-white text-gray-900 p-6 rounded-xl shadow-xl">
                                    <div className="text-3xl font-bold text-red-600">+50%</div>
                                    <div className="text-sm text-gray-600">Aumento promedio en ventas</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            {/* Stats Section */}
            <section className="py-16 bg-gray-50">
                <div className="container mx-auto px-6">
                    <div className="grid grid-cols-2 lg:grid-cols-4 gap-8 text-center">
                        <div>
                            <div className="text-4xl font-bold text-red-600 mb-2">300+</div>
                            <div className="text-gray-600">Restaurantes Partners</div>
                        </div>
                        <div>
                            <div className="text-4xl font-bold text-red-600 mb-2">75K+</div>
                            <div className="text-gray-600">Pedidos Procesados</div>
                        </div>
                        <div>
                            <div className="text-4xl font-bold text-red-600 mb-2">98%</div>
                            <div className="text-gray-600">Satisfacción del Cliente</div>
                        </div>
                        <div>
                            <div className="text-4xl font-bold text-red-600 mb-2">24/7</div>
                            <div className="text-gray-600">Soporte Técnico</div>
                        </div>
                    </div>
                </div>
            </section>

            {/* Restaurant Types Section */}
            <section className="py-20 bg-gradient-to-r from-orange-50 to-red-50">
                <div className="container mx-auto px-6">
                    <div className="text-center mb-16">
                        <h2 className="text-4xl font-bold text-gray-900 mb-4">
                            Todo tipo de restaurantes son bienvenidos
                        </h2>
                        <p className="text-xl text-gray-600">
                            Desde antojitos hasta alta cocina, todos tienen lugar en Maya Digital
                        </p>
                    </div>

                    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-6">
                        {restaurantTypes.map((type, index) => (
                            <div key={index} className="bg-white p-6 rounded-xl shadow-lg text-center hover:shadow-xl transition">
                                <div className="text-4xl mb-3">{type.icon}</div>
                                <h3 className="font-bold text-gray-900">{type.name}</h3>
                            </div>
                        ))}
                    </div>
                </div>
            </section>

            {/* Benefits Section */}
            <section className="py-20">
                <div className="container mx-auto px-6">
                    <div className="text-center mb-16">
                        <h2 className="text-4xl font-bold text-gray-900 mb-4">
                            ¿Por qué elegir Maya Digital?
                        </h2>
                        <p className="text-xl text-gray-600 max-w-3xl mx-auto">
                            Somos la plataforma gastronómica líder en turismo cultural. 
                            Te ayudamos a conectar con comensales que valoran la auténtica cocina mexicana.
                        </p>
                    </div>

                    <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                        {benefits.map((benefit, index) => (
                            <div key={index} className="bg-white p-8 rounded-xl shadow-lg hover:shadow-xl transition">
                                <div className="text-4xl mb-4">{benefit.icon}</div>
                                <h3 className="text-xl font-bold text-gray-900 mb-3">{benefit.title}</h3>
                                <p className="text-gray-600">{benefit.description}</p>
                            </div>
                        ))}
                    </div>
                </div>
            </section>

            {/* How it Works Section */}
            <section id="como-funciona" className="py-20 bg-gradient-to-r from-red-50 to-orange-50">
                <div className="container mx-auto px-6">
                    <div className="text-center mb-16">
                        <h2 className="text-4xl font-bold text-gray-900 mb-4">
                            ¿Cómo funciona?
                        </h2>
                        <p className="text-xl text-gray-600">
                            Tres pasos simples para empezar a recibir más comensales
                        </p>
                    </div>

                    <div className="grid md:grid-cols-3 gap-8">
                        {steps.map((step, index) => (
                            <div key={index} className="text-center">
                                <div className="bg-red-600 text-white w-16 h-16 rounded-full flex items-center justify-center text-2xl font-bold mx-auto mb-6">
                                    {step.number}
                                </div>
                                <div className="text-4xl mb-4">{step.icon}</div>
                                <h3 className="text-xl font-bold text-gray-900 mb-3">{step.title}</h3>
                                <p className="text-gray-600">{step.description}</p>
                            </div>
                        ))}
                    </div>

                    <div className="text-center mt-12">
                        <Link 
                            to="/registro-restaurante"
                            className="bg-red-600 text-white px-8 py-4 rounded-lg font-bold text-lg hover:bg-red-700 transition inline-block"
                        >
                            Empezar Ahora →
                        </Link>
                    </div>
                </div>
            </section>

            {/* Features Section */}
            <section className="py-20 bg-white">
                <div className="container mx-auto px-6">
                    <div className="text-center mb-16">
                        <h2 className="text-4xl font-bold text-gray-900 mb-4">
                            Herramientas diseñadas para restaurantes
                        </h2>
                    </div>

                    <div className="grid lg:grid-cols-2 gap-12 items-center">
                        <div>
                            <img 
                                src="https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?q=80&w=2070&auto=format&fit=crop" 
                                alt="Chef trabajando en cocina"
                                className="rounded-2xl shadow-xl"
                            />
                        </div>
                        <div className="space-y-6">
                            <div className="flex items-start space-x-4">
                                <div className="bg-red-100 text-red-600 p-3 rounded-lg">
                                    📋
                                </div>
                                <div>
                                    <h3 className="text-xl font-bold mb-2">Gestión de Menú</h3>
                                    <p className="text-gray-600">Actualiza tu menú, precios y disponibilidad en tiempo real desde cualquier dispositivo.</p>
                                </div>
                            </div>
                            <div className="flex items-start space-x-4">
                                <div className="bg-orange-100 text-orange-600 p-3 rounded-lg">
                                    🔔
                                </div>
                                <div>
                                    <h3 className="text-xl font-bold mb-2">Notificaciones Instantáneas</h3>
                                    <p className="text-gray-600">Recibe alertas inmediatas de nuevas reservas y pedidos directamente en tu teléfono.</p>
                                </div>
                            </div>
                            <div className="flex items-start space-x-4">
                                <div className="bg-yellow-100 text-yellow-600 p-3 rounded-lg">
                                    📊
                                </div>
                                <div>
                                    <h3 className="text-xl font-bold mb-2">Analíticas de Ventas</h3>
                                    <p className="text-gray-600">Conoce tus platillos más populares, horarios pico y tendencias de tus clientes.</p>
                                </div>
                            </div>
                            <div className="flex items-start space-x-4">
                                <div className="bg-green-100 text-green-600 p-3 rounded-lg">
                                    💳
                                </div>
                                <div>
                                    <h3 className="text-xl font-bold mb-2">Pagos Seguros</h3>
                                    <p className="text-gray-600">Sistema de pagos integrado con transferencias automáticas cada 15 días.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            {/* Testimonials Section */}
            <section className="py-20 bg-gray-50">
                <div className="container mx-auto px-6">
                    <div className="text-center mb-16">
                        <h2 className="text-4xl font-bold text-gray-900 mb-4">
                            Lo que dicen nuestros chefs
                        </h2>
                        <p className="text-xl text-gray-600">
                            Historias reales de restaurantes que han crecido con Maya Digital
                        </p>
                    </div>

                    <div className="grid md:grid-cols-3 gap-8">
                        {testimonials.map((testimonial, index) => (
                            <div key={index} className="bg-white p-8 rounded-xl shadow-lg">
                                <div className="flex items-center mb-4">
                                    {[...Array(testimonial.rating)].map((_, i) => (
                                        <span key={i} className="text-yellow-400 text-xl">★</span>
                                    ))}
                                </div>
                                <p className="text-gray-600 mb-6 italic">"{testimonial.quote}"</p>
                                <div>
                                    <div className="font-bold text-gray-900">{testimonial.name}</div>
                                    <div className="text-sm text-gray-500">{testimonial.restaurant}</div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </section>

            {/* FAQ Section */}
            <section className="py-20 bg-white">
                <div className="container mx-auto px-6">
                    <div className="text-center mb-16">
                        <h2 className="text-4xl font-bold text-gray-900 mb-4">
                            Preguntas Frecuentes
                        </h2>
                    </div>

                    <div className="max-w-3xl mx-auto space-y-6">
                        <FAQItem 
                            question="¿Cuánto cuesta unirse a Maya Digital?"
                            answer="Es completamente gratis unirse. Solo pagas una comisión del 12% cuando recibes un pedido confirmado. No hay costos iniciales ni cuotas mensuales."
                        />
                        <FAQItem 
                            question="¿Qué tipos de restaurantes aceptan?"
                            answer="Aceptamos todo tipo de restaurantes: desde antojitos y fondas hasta alta cocina y restaurantes de autor. Lo importante es que ofrezcan auténtica gastronomía mexicana."
                        />
                        <FAQItem 
                            question="¿Cómo funcionan los pedidos para llevar?"
                            answer="Los clientes pueden hacer pedidos directamente desde la app. Recibes notificaciones inmediatas y puedes confirmar el tiempo de preparación."
                        />
                        <FAQItem 
                            question="¿Puedo actualizar mi menú en cualquier momento?"
                            answer="Sí, puedes actualizar tu menú, precios y disponibilidad en tiempo real desde tu panel de control las 24 horas del día."
                        />
                        <FAQItem 
                            question="¿Cómo recibo los pagos?"
                            answer="Los pagos se procesan automáticamente y se transfieren a tu cuenta bancaria cada 15 días. Deducimos nuestra comisión y te enviamos el resto."
                        />
                    </div>
                </div>
            </section>

            {/* CTA Final */}
            <section className="py-20 bg-gradient-to-r from-red-600 to-orange-700 text-white">
                <div className="container mx-auto px-6 text-center">
                    <h2 className="text-4xl font-bold mb-4">
                        ¿Listo para hacer crecer tu restaurante?
                    </h2>
                    <p className="text-xl mb-8 max-w-2xl mx-auto">
                        Únete a cientos de restaurantes que ya están aumentando sus ventas 
                        con Maya Digital. El registro toma menos de 15 minutos.
                    </p>
                    
                    <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
                        <Link 
                            to="/registro-restaurante"
                            className="bg-yellow-400 text-red-900 px-8 py-4 rounded-lg font-bold text-lg hover:bg-yellow-300 transition"
                        >
                            🍴 Registrar Mi Restaurante Gratis
                        </Link>
                        <div className="text-orange-100">
                            o <a href="mailto:restaurantes@mayadigital.com" className="underline hover:text-white">contáctanos directamente</a>
                        </div>
                    </div>

                    <div className="mt-8 text-orange-200 text-sm">
                        ✓ Sin costo inicial • ✓ Configuración gratuita • ✓ Soporte incluido
                    </div>
                </div>
            </section>

            {/* Footer */}
            <footer className="bg-gray-900 text-white py-12">
                <div className="container mx-auto px-6">
                    <div className="grid md:grid-cols-4 gap-8">
                        <div>
                            <h3 className="text-xl font-bold mb-4">Maya Digital</h3>
                            <p className="text-gray-400">
                                La plataforma gastronómica líder en turismo cultural mexicano.
                            </p>
                        </div>
                        <div>
                            <h4 className="font-bold mb-4">Para Restaurantes</h4>
                            <ul className="space-y-2 text-gray-400">
                                <li><Link to="/registro-restaurante" className="hover:text-white">Registrar Restaurante</Link></li>
                                <li><a href="#" className="hover:text-white">Centro de Ayuda</a></li>
                                <li><a href="#" className="hover:text-white">Recursos Gastronómicos</a></li>
                            </ul>
                        </div>
                        <div>
                            <h4 className="font-bold mb-4">Soporte</h4>
                            <ul className="space-y-2 text-gray-400">
                                <li><a href="tel:+529991234567" className="hover:text-white">+52 999 123 4567</a></li>
                                <li><a href="mailto:restaurantes@mayadigital.com" className="hover:text-white">restaurantes@mayadigital.com</a></li>
                                <li><a href="#" className="hover:text-white">Chat en vivo</a></li>
                            </ul>
                        </div>
                        <div>
                            <h4 className="font-bold mb-4">Síguenos</h4>
                            <div className="flex space-x-4">
                                <a href="#" className="text-gray-400 hover:text-white">Facebook</a>
                                <a href="#" className="text-gray-400 hover:text-white">Instagram</a>
                                <a href="#" className="text-gray-400 hover:text-white">LinkedIn</a>
                            </div>
                        </div>
                    </div>
                    <div className="border-t border-gray-700 mt-8 pt-8 text-center text-gray-400">
                        <p>&copy; 2024 Maya Digital. Todos los derechos reservados.</p>
                    </div>
                </div>
            </footer>
        </div>
    );
}

// Componente FAQ Item
function FAQItem({ question, answer }) {
    const [isOpen, setIsOpen] = React.useState(false);

    return (
        <div className="bg-white rounded-lg shadow-md">
            <button
                className="w-full p-6 text-left flex justify-between items-center hover:bg-gray-50"
                onClick={() => setIsOpen(!isOpen)}
            >
                <span className="font-semibold text-gray-900">{question}</span>
                <span className={`transform transition-transform ${isOpen ? 'rotate-180' : ''}`}>
                    ↓
                </span>
            </button>
            {isOpen && (
                <div className="px-6 pb-6">
                    <p className="text-gray-600">{answer}</p>
                </div>
            )}
        </div>
    );
}
===== END frontend/src/pages/RestaurantLandingPage.js =====

===== BEGIN frontend/src/pages/RestaurantRegistrationPage.js =====
// frontend/src/pages/RestaurantRegistrationPage.js

import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';

export default function RestaurantRegistrationPage() {
    const [currentStep, setCurrentStep] = useState(1);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [error, setError] = useState('');
    const [success, setSuccess] = useState('');
    const navigate = useNavigate();

    // Estados para el formulario
    const [ownerData, setOwnerData] = useState({
        first_name: '',
        last_name: '',
        email: '',
        password: '',
        confirmPassword: '',
        phone: ''
    });

    const [restaurantData, setRestaurantData] = useState({
        name: '',
        description: '',
        specialty: '',
        cuisine_type: '',
        location: '',
        address: '',
        image_url: '',
        phone: '',
        email: '',
        website: '',
        capacity: '',
        price_range: '$$',
        delivery_available: false,
        reservation_required: false,
        operating_hours: {
            monday: { open: '09:00', close: '22:00', closed: false },
            tuesday: { open: '09:00', close: '22:00', closed: false },
            wednesday: { open: '09:00', close: '22:00', closed: false },
            thursday: { open: '09:00', close: '22:00', closed: false },
            friday: { open: '09:00', close: '22:00', closed: false },
            saturday: { open: '09:00', close: '22:00', closed: false },
            sunday: { open: '09:00', close: '22:00', closed: false }
        },
        services: [],
        menu_highlights: [
            { name: '', description: '', price: '', image_url: '', category: '' }
        ]
    });

    // Manejo de cambios en datos del propietario
    const handleOwnerChange = (e) => {
        const { name, value } = e.target;
        setOwnerData(prev => ({ ...prev, [name]: value }));
    };

    // Manejo de cambios en datos del restaurante
    const handleRestaurantChange = (e) => {
        const { name, value, type, checked } = e.target;
        setRestaurantData(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value
        }));
    };

    // Manejo de horarios
    const handleScheduleChange = (day, field, value) => {
        setRestaurantData(prev => ({
            ...prev,
            operating_hours: {
                ...prev.operating_hours,
                [day]: { ...prev.operating_hours[day], [field]: value }
            }
        }));
    };

    // Manejo de servicios
    const handleServiceToggle = (service) => {
        setRestaurantData(prev => ({
            ...prev,
            services: prev.services.includes(service)
                ? prev.services.filter(s => s !== service)
                : [...prev.services, service]
        }));
    };

    // Manejo de platillos destacados
    const handleMenuHighlightChange = (index, field, value) => {
        setRestaurantData(prev => ({
            ...prev,
            menu_highlights: prev.menu_highlights.map((item, i) =>
                i === index ? { ...item, [field]: value } : item
            )
        }));
    };

    // Agregar nuevo platillo
    const addMenuHighlight = () => {
        setRestaurantData(prev => ({
            ...prev,
            menu_highlights: [
                ...prev.menu_highlights,
                { name: '', description: '', price: '', image_url: '', category: '' }
            ]
        }));
    };

    // Eliminar platillo
    const removeMenuHighlight = (index) => {
        if (restaurantData.menu_highlights.length > 1) {
            setRestaurantData(prev => ({
                ...prev,
                menu_highlights: prev.menu_highlights.filter((_, i) => i !== index)
            }));
        }
    };

    // Navegación entre pasos
    const nextStep = () => {
        if (currentStep < 4) setCurrentStep(currentStep + 1);
    };

    const prevStep = () => {
        if (currentStep > 1) setCurrentStep(currentStep - 1);
    };

    // Validación del paso 1
    const validateStep1 = () => {
        if (!ownerData.first_name || !ownerData.last_name || !ownerData.email || !ownerData.password) {
            setError('Todos los campos marcados con * son obligatorios');
            return false;
        }
        if (ownerData.password !== ownerData.confirmPassword) {
            setError('Las contraseñas no coinciden');
            return false;
        }
        if (ownerData.password.length < 8) {
            setError('La contraseña debe tener al menos 8 caracteres');
            return false;
        }
        return true;
    };

    // Validación del paso 2
    const validateStep2 = () => {
        if (!restaurantData.name || !restaurantData.specialty || !restaurantData.location || !restaurantData.address) {
            setError('Todos los campos marcados con * son obligatorios');
            return false;
        }
        return true;
    };

    // Envío del formulario
    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);
        setError('');

        try {
            // Paso 1: Registrar usuario
            const userResponse = await fetch('/api/auth/register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    ...ownerData,
                    role: 'BusinessOwner'
                })
            });

            const userData = await userResponse.json();

            if (!userResponse.ok) {
                throw new Error(userData.error || 'Error al registrar usuario');
            }

            // Paso 2: Crear restaurante con el token obtenido
            const restaurantPayload = {
                business_type: 'restaurant',
                name: restaurantData.name,
                description: restaurantData.description,
                location: restaurantData.location,
                address: restaurantData.address,
                phone: restaurantData.phone,
                email: restaurantData.email,
                website: restaurantData.website,
                business_data: {
                    specialty: restaurantData.specialty,
                    cuisine_type: restaurantData.cuisine_type,
                    price_range: restaurantData.price_range,
                    capacity: parseInt(restaurantData.capacity) || null,
                    delivery_available: restaurantData.delivery_available,
                    reservation_required: restaurantData.reservation_required,
                    services: restaurantData.services,
                    menu_highlights: restaurantData.menu_highlights.filter(item => item.name.trim())
                },
                operating_hours: restaurantData.operating_hours,
                images: restaurantData.image_url ? [{ 
                    image_url: restaurantData.image_url, 
                    image_type: 'main', 
                    display_order: 0 
                }] : []
            };

            console.log('Enviando payload:', JSON.stringify(restaurantPayload, null, 2));

            const restaurantResponse = await fetch('/api/businesses', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${userData.token}`
                },
                body: JSON.stringify(restaurantPayload)
            });

            const restaurantResult = await restaurantResponse.json();

            if (!restaurantResponse.ok) {
                throw new Error(restaurantResult.error || 'Error al registrar restaurante');
            }

            setSuccess('¡Registro exitoso! Tu restaurante ha sido enviado para aprobación.');
            
            // Redirigir después de 3 segundos
            setTimeout(() => {
                navigate('/portal');
            }, 3000);

        } catch (err) {
            console.error('Error en registro:', err);
            setError(err.message);
        } finally {
            setIsSubmitting(false);
        }
    };

    // Componente para indicador de pasos
    const StepIndicator = () => (
        <div className="mb-8">
            <div className="flex items-center justify-center space-x-4">
                {[1, 2, 3, 4].map(step => (
                    <div key={step} className="flex items-center">
                        <div className={`w-10 h-10 rounded-full flex items-center justify-center text-sm font-bold ${
                            step <= currentStep ? 'bg-red-600 text-white' : 'bg-gray-300 text-gray-600'
                        }`}>
                            {step}
                        </div>
                        {step < 4 && (
                            <div className={`w-20 h-1 mx-2 ${
                                step < currentStep ? 'bg-red-600' : 'bg-gray-300'
                            }`} />
                        )}
                    </div>
                ))}
            </div>
            <div className="text-center mt-4 text-sm text-gray-600">
                Paso {currentStep} de 4: {
                    currentStep === 1 ? 'Información del Propietario' :
                    currentStep === 2 ? 'Información del Restaurante' :
                    currentStep === 3 ? 'Horarios y Servicios' :
                    'Menú Destacado'
                }
            </div>
        </div>
    );

    return (
        <div className="min-h-screen bg-gradient-to-br from-red-50 to-orange-100 py-12">
            <div className="container mx-auto px-6 max-w-4xl">
                
                {/* Header */}
                <div className="text-center mb-8">
                    <h1 className="text-4xl font-bold text-gray-900 mb-4">
                        🍽️ Únete a Maya Digital
                    </h1>
                    <p className="text-xl text-gray-600 mb-2">
                        Registra tu restaurante y conecta con amantes de la gastronomía
                    </p>
                    <p className="text-gray-500">
                        Proceso simple y rápido • Comisión competitiva • Soporte especializado
                    </p>
                </div>

                {/* Benefits Banner */}
                <div className="bg-gradient-to-r from-red-500 to-orange-600 text-white p-6 rounded-xl mb-8">
                    <div className="grid md:grid-cols-3 gap-4 text-center">
                        <div>
                            <div className="text-2xl mb-2">🍴</div>
                            <h3 className="font-bold">Más Comensales</h3>
                            <p className="text-sm">Foodlovers buscan tu cocina</p>
                        </div>
                        <div>
                            <div className="text-2xl mb-2">📱</div>
                            <h3 className="font-bold">Pedidos Online</h3>
                            <p className="text-sm">Sistema integrado de reservas</p>
                        </div>
                        <div>
                            <div className="text-2xl mb-2">📈</div>
                            <h3 className="font-bold">Herramientas Pro</h3>
                            <p className="text-sm">Analíticas y gestión avanzada</p>
                        </div>
                    </div>
                </div>

                {/* Main Form */}
                <div className="bg-white rounded-2xl shadow-xl p-8">
                    
                    <StepIndicator />

                    {error && (
                        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
                            {error}
                        </div>
                    )}

                    {success && (
                        <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-6">
                            {success}
                        </div>
                    )}

                    <form onSubmit={handleSubmit}>
                        
                        {/* Paso 1: Información del Propietario */}
                        {currentStep === 1 && (
                            <Step1OwnerInfo 
                                data={ownerData}
                                onChange={handleOwnerChange}
                            />
                        )}

                        {/* Paso 2: Información del Restaurante */}
                        {currentStep === 2 && (
                            <Step2RestaurantInfo 
                                data={restaurantData}
                                onChange={handleRestaurantChange}
                            />
                        )}

                        {/* Paso 3: Horarios y Servicios */}
                        {currentStep === 3 && (
                            <Step3ScheduleServices 
                                data={restaurantData}
                                onScheduleChange={handleScheduleChange}
                                onServiceToggle={handleServiceToggle}
                                onChange={handleRestaurantChange}
                            />
                        )}

                        {/* Paso 4: Menú Destacado */}
                        {currentStep === 4 && (
                            <Step4MenuHighlights 
                                data={restaurantData}
                                onMenuChange={handleMenuHighlightChange}
                                onAddMenu={addMenuHighlight}
                                onRemoveMenu={removeMenuHighlight}
                            />
                        )}

                        {/* Navegación */}
                        <div className="flex justify-between mt-8 pt-6 border-t">
                            <button
                                type="button"
                                onClick={prevStep}
                                disabled={currentStep === 1}
                                className="bg-gray-500 text-white px-6 py-3 rounded-lg disabled:bg-gray-300 disabled:cursor-not-allowed transition"
                            >
                                ← Anterior
                            </button>

                            {currentStep < 4 ? (
                                <button
                                    type="button"
                                    onClick={() => {
                                        setError('');
                                        if (currentStep === 1 && validateStep1()) {
                                            nextStep();
                                        } else if (currentStep === 2 && validateStep2()) {
                                            nextStep();
                                        } else if (currentStep === 3) {
                                            nextStep();
                                        }
                                    }}
                                    className="bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition"
                                >
                                    Siguiente →
                                </button>
                            ) : (
                                <button
                                    type="submit"
                                    disabled={isSubmitting}
                                    className="bg-green-600 text-white px-8 py-3 rounded-lg disabled:bg-green-300 disabled:cursor-not-allowed hover:bg-green-700 transition"
                                >
                                    {isSubmitting ? (
                                        <>
                                            <span className="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
                                            Registrando...
                                        </>
                                    ) : (
                                        '🚀 Registrar Restaurante'
                                    )}
                                </button>
                            )}
                        </div>
                    </form>
                </div>

                {/* Footer */}
                <div className="text-center mt-8 text-gray-600">
                    <p>¿Ya tienes una cuenta? 
                        <Link to="/" className="text-red-600 hover:underline ml-1">
                            Inicia sesión aquí
                        </Link>
                    </p>
                </div>
            </div>
        </div>
    );
}

// Componente Paso 1: Información del Propietario
function Step1OwnerInfo({ data, onChange }) {
    return (
        <div className="space-y-6">
            <div className="text-center mb-6">
                <h2 className="text-2xl font-bold text-gray-900">Información del Propietario</h2>
                <p className="text-gray-600">Comencemos con tus datos personales</p>
            </div>

            <div className="grid md:grid-cols-2 gap-6">
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Nombre *
                    </label>
                    <input
                        type="text"
                        name="first_name"
                        value={data.first_name}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                        placeholder="Tu nombre"
                        required
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Apellido *
                    </label>
                    <input
                        type="text"
                        name="last_name"
                        value={data.last_name}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                        placeholder="Tu apellido"
                        required
                    />
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                    Email *
                </label>
                <input
                    type="email"
                    name="email"
                    value={data.email}
                    onChange={onChange}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                    placeholder="tu@email.com"
                    required
                />
                <p className="text-xs text-gray-500 mt-1">
                    Este será tu email de acceso a la plataforma
                </p>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                    Teléfono
                </label>
                <input
                    type="tel"
                    name="phone"
                    value={data.phone}
                    onChange={onChange}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                    placeholder="+52 999 123 4567"
                />
            </div>

            <div className="grid md:grid-cols-2 gap-6">
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Contraseña *
                    </label>
                    <input
                        type="password"
                        name="password"
                        value={data.password}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                        placeholder="Mínimo 8 caracteres"
                        required
                        minLength="8"
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Confirmar Contraseña *
                    </label>
                    <input
                        type="password"
                        name="confirmPassword"
                        value={data.confirmPassword}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                        placeholder="Repite tu contraseña"
                        required
                    />
                </div>
            </div>
        </div>
    );
}

// Componente Paso 2: Información del Restaurante
function Step2RestaurantInfo({ data, onChange }) {
    const cuisineTypes = [
        'Mexicana Tradicional', 'Yucateca', 'Oaxaqueña', 'Poblana', 'Veracruzana',
        'Mariscos', 'Antojitos', 'Cocina de Autor', 'Fusión', 'Vegetariana', 'Parrilla'
    ];

    const priceRanges = [
        { value: '$', label: '$ - Económico (menos de $200 por persona)' },
        { value: '$$', label: '$$ - Moderado ($200 - $500 por persona)' },
        { value: '$$$', label: '$$$ - Caro ($500 - $1000 por persona)' },
        { value: '$$$$', label: '$$$$ - Muy caro (más de $1000 por persona)' }
    ];

    return (
        <div className="space-y-6">
            <div className="text-center mb-6">
                <h2 className="text-2xl font-bold text-gray-900">Información del Restaurante</h2>
                <p className="text-gray-600">Cuéntanos sobre tu establecimiento</p>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                    Nombre del Restaurante *
                </label>
                <input
                    type="text"
                    name="name"
                    value={data.name}
                    onChange={onChange}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                    placeholder="La Cocina de Abuela"
                    required
                />
            </div>

            <div className="grid md:grid-cols-2 gap-6">
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Especialidad *
                    </label>
                    <input
                        type="text"
                        name="specialty"
                        value={data.specialty}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                        placeholder="Cocina Yucateca Tradicional"
                        required
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Tipo de Cocina
                    </label>
                    <select
                        name="cuisine_type"
                        value={data.cuisine_type}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                    >
                        <option value="">Seleccionar tipo</option>
                        {cuisineTypes.map(type => (
                            <option key={type} value={type}>{type}</option>
                        ))}
                    </select>
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descripción
                </label>
                <textarea
                    name="description"
                    value={data.description}
                    onChange={onChange}
                    rows="4"
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                    placeholder="Describe tu restaurante, ambiente, historia, qué lo hace especial..."
                />
            </div>

            <div className="grid md:grid-cols-2 gap-6">
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Ubicación *
                    </label>
                    <input
                        type="text"
                        name="location"
                        value={data.location}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                        placeholder="Mérida, Yucatán"
                        required
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Capacidad (personas)
                    </label>
                    <input
                        type="number"
                        name="capacity"
                        value={data.capacity}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                        placeholder="50"
                        min="1"
                    />
                </div>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                    Dirección Completa *
                </label>
                <input
                    type="text"
                    name="address"
                    value={data.address}
                    onChange={onChange}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                    placeholder="Calle 60 #123 x 45 y 47, Centro Histórico"
                    required
                />
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                    Rango de Precios
                </label>
                <select
                    name="price_range"
                    value={data.price_range}
                    onChange={onChange}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                >
                    {priceRanges.map(range => (
                        <option key={range.value} value={range.value}>{range.label}</option>
                    ))}
                </select>
            </div>

            <div className="grid md:grid-cols-2 gap-6">
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Teléfono del Restaurante
                    </label>
                    <input
                        type="tel"
                        name="phone"
                        value={data.phone}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                        placeholder="+52 999 123 4567"
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Email del Restaurante
                    </label>
                    <input
                        type="email"
                        name="email"
                        value={data.email}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                        placeholder="reservas@turestaurante.com"
                    />
                </div>
            </div>

            <div className="grid md:grid-cols-2 gap-6">
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Sitio Web
                    </label>
                    <input
                        type="url"
                        name="website"
                        value={data.website}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                        placeholder="https://www.turestaurante.com"
                    />
                </div>

                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        URL de Imagen Principal
                    </label>
                    <input
                        type="url"
                        name="image_url"
                        value={data.image_url}
                        onChange={onChange}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                        placeholder="https://ejemplo.com/imagen-restaurante.jpg"
                    />
                </div>
            </div>
        </div>
    );
}

// Componente Paso 3: Horarios y Servicios
function Step3ScheduleServices({ data, onScheduleChange, onServiceToggle, onChange }) {
    const days = [
        { key: 'monday', label: 'Lunes' },
        { key: 'tuesday', label: 'Martes' },
        { key: 'wednesday', label: 'Miércoles' },
        { key: 'thursday', label: 'Jueves' },
        { key: 'friday', label: 'Viernes' },
        { key: 'saturday', label: 'Sábado' },
        { key: 'sunday', label: 'Domingo' }
    ];

    const availableServices = [
        'Desayunos', 'Comidas', 'Cenas', 'Servicio a domicilio', 
        'Para llevar', 'Reservaciones', 'Eventos privados', 
        'Música en vivo', 'Terraza', 'Estacionamiento', 
        'WiFi gratis', 'Aire acondicionado'
    ];

    return (
        <div className="space-y-8">
            <div className="text-center mb-6">
                <h2 className="text-2xl font-bold text-gray-900">Horarios y Servicios</h2>
                <p className="text-gray-600">Define cuándo y cómo atiendes a tus clientes</p>
            </div>

            {/* Horarios de Operación */}
            <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Horarios de Operación</h3>
                <div className="space-y-3">
                    {days.map(day => (
                        <div key={day.key} className="grid grid-cols-4 gap-4 items-center">
                            <div className="font-medium text-gray-700">{day.label}</div>
                            <div>
                                <input
                                    type="time"
                                    value={data.operating_hours[day.key].open}
                                    onChange={(e) => onScheduleChange(day.key, 'open', e.target.value)}
                                    disabled={data.operating_hours[day.key].closed}
                                    className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-red-500 disabled:bg-gray-100"
                                />
                            </div>
                            <div>
                                <input
                                    type="time"
                                    value={data.operating_hours[day.key].close}
                                    onChange={(e) => onScheduleChange(day.key, 'close', e.target.value)}
                                    disabled={data.operating_hours[day.key].closed}
                                    className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-red-500 disabled:bg-gray-100"
                                />
                            </div>
                            <div>
                                <label className="flex items-center">
                                    <input
                                        type="checkbox"
                                        checked={data.operating_hours[day.key].closed}
                                        onChange={(e) => onScheduleChange(day.key, 'closed', e.target.checked)}
                                        className="rounded border-gray-300 text-red-600 focus:ring-red-500"
                                    />
                                    <span className="ml-2 text-sm text-gray-600">Cerrado</span>
                                </label>
                            </div>
                        </div>
                    ))}
                </div>
            </div>

            {/* Servicios */}
            <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Servicios Disponibles</h3>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                    {availableServices.map(service => (
                        <label key={service} className="flex items-center space-x-2 cursor-pointer">
                            <input
                                type="checkbox"
                                checked={data.services.includes(service)}
                                onChange={() => onServiceToggle(service)}
                                className="rounded border-gray-300 text-red-600 focus:ring-red-500"
                            />
                            <span className="text-sm text-gray-700">{service}</span>
                        </label>
                    ))}
                </div>
            </div>

            {/* Opciones adicionales */}
            <div className="space-y-4">
                <h3 className="text-lg font-semibold text-gray-900">Opciones Adicionales</h3>
                
                <div className="grid md:grid-cols-2 gap-6">
                    <label className="flex items-center space-x-3">
                        <input
                            type="checkbox"
                            name="delivery_available"
                            checked={data.delivery_available}
                            onChange={onChange}
                            className="rounded border-gray-300 text-red-600 focus:ring-red-500"
                        />
                        <div>
                            <span className="font-medium text-gray-900">Servicio a Domicilio</span>
                            <p className="text-sm text-gray-600">Ofrecemos entrega a domicilio</p>
                        </div>
                    </label>

                    <label className="flex items-center space-x-3">
                        <input
                            type="checkbox"
                            name="reservation_required"
                            checked={data.reservation_required}
                            onChange={onChange}
                            className="rounded border-gray-300 text-red-600 focus:ring-red-500"
                        />
                        <div>
                            <span className="font-medium text-gray-900">Reserva Requerida</span>
                            <p className="text-sm text-gray-600">Los clientes deben reservar mesa</p>
                        </div>
                    </label>
                </div>
            </div>
        </div>
    );
}

// Componente Paso 4: Menú Destacado - VERSION MEJORADA
function Step4MenuHighlights({ data, onMenuChange, onAddMenu, onRemoveMenu }) {
    const dishCategories = [
        'Entradas', 'Sopas', 'Platos Fuertes', 'Mariscos', 'Carnes', 
        'Vegetarianos', 'Postres', 'Bebidas', 'Especialidades', 'Antojitos'
    ];

    return (
        <div className="space-y-6">
            <div className="text-center mb-6">
                <h2 className="text-2xl font-bold text-gray-900">Menú Destacado</h2>
                <p className="text-gray-600">Muestra tus mejores platillos para atraer clientes</p>
            </div>

            <div className="space-y-6">
                {data.menu_highlights.map((item, index) => (
                    <div key={index} className="bg-gray-50 p-6 rounded-lg border-2 border-dashed border-gray-200">
                        <div className="flex justify-between items-center mb-4">
                            <h3 className="font-semibold text-gray-900">
                                Platillo {index + 1} {index === 0 && <span className="text-red-600">*</span>}
                            </h3>
                            {data.menu_highlights.length > 1 && (
                                <button
                                    type="button"
                                    onClick={() => onRemoveMenu(index)}
                                    className="text-red-600 hover:text-red-800 text-sm font-medium"
                                >
                                    ✕ Eliminar
                                </button>
                            )}
                        </div>
                        
                        <div className="grid md:grid-cols-2 gap-4 mb-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Nombre del Platillo {index === 0 && <span className="text-red-600">*</span>}
                                </label>
                                <input
                                    type="text"
                                    value={item.name}
                                    onChange={(e) => onMenuChange(index, 'name', e.target.value)}
                                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                                    placeholder="Cochinita Pibil"
                                    required={index === 0}
                                />
                            </div>
                            
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Categoría
                                </label>
                                <select
                                    value={item.category}
                                    onChange={(e) => onMenuChange(index, 'category', e.target.value)}
                                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                                >
                                    <option value="">Seleccionar categoría</option>
                                    {dishCategories.map(category => (
                                        <option key={category} value={category}>{category}</option>
                                    ))}
                                </select>
                            </div>
                        </div>

                        <div className="grid md:grid-cols-2 gap-4 mb-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Precio (MXN)
                                </label>
                                <input
                                    type="number"
                                    value={item.price}
                                    onChange={(e) => onMenuChange(index, 'price', e.target.value)}
                                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                                    placeholder="250"
                                    min="0"
                                    step="0.01"
                                />
                            </div>
                            
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    URL de Imagen del Platillo
                                </label>
                                <input
                                    type="url"
                                    value={item.image_url}
                                    onChange={(e) => onMenuChange(index, 'image_url', e.target.value)}
                                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                                    placeholder="https://ejemplo.com/platillo.jpg"
                                />
                            </div>
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                                Descripción
                            </label>
                            <textarea
                                value={item.description}
                                onChange={(e) => onMenuChange(index, 'description', e.target.value)}
                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                                placeholder="Carne de cerdo marinada en achiote, cocida lentamente en horno de tierra..."
                                rows="3"
                            />
                        </div>

                        {/* Vista previa de imagen */}
                        {item.image_url && (
                            <div className="mt-4">
                                <p className="text-sm font-medium text-gray-700 mb-2">Vista previa:</p>
                                <img
                                    src={item.image_url}
                                    alt={item.name || 'Platillo'}
                                    className="w-32 h-24 object-cover rounded-lg border"
                                    onError={(e) => {
                                        e.target.style.display = 'none';
                                    }}
                                />
                            </div>
                        )}
                    </div>
                ))}
            </div>

            {/* Botón para agregar más platillos */}
            <div className="text-center">
                <button
                    type="button"
                    onClick={onAddMenu}
                    className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition font-medium"
                >
                    ➕ Agregar Otro Platillo
                </button>
                <p className="text-sm text-gray-500 mt-2">
                    Puedes agregar tantos platillos como desees
                </p>
            </div>

            <div className="bg-blue-50 p-4 rounded-lg">
                <div className="flex items-start space-x-3">
                    <div className="text-blue-600 text-xl">💡</div>
                    <div>
                        <h4 className="font-semibold text-blue-900 mb-1">Consejos para destacar</h4>
                        <ul className="text-sm text-blue-800 space-y-1">
                            <li>• Incluye fotos atractivas de alta calidad de cada platillo</li>
                            <li>• Describe los ingredientes especiales o la preparación única</li>
                            <li>• Menciona si es un platillo tradicional de la región</li>
                            <li>• Organiza por categorías para facilitar la navegación</li>
                            <li>• Puedes actualizar tu menú completo después del registro</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    );
}
===== END frontend/src/pages/RestaurantRegistrationPage.js =====

===== BEGIN frontend/src/pages/RestaurantesPage.js =====
import { useState, useEffect } from 'react';

export default function RestaurantesPage({ onMenuClick }) {
    const [restaurantes, setRestaurantes] = useState([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        fetch('/api/restaurantes')
            .then(res => res.json())
            .then(data => {
                setRestaurantes(data);
                setIsLoading(false);
            })
            .catch(error => console.error("Error al obtener restaurantes:", error));
    }, []);

    if (isLoading) {
        return <div className="container mx-auto px-6 py-16 text-center"><p>Cargando restaurantes...</p></div>;
    }

    return (
        <div className="container mx-auto px-6 py-16">
            <h2 className="text-4xl font-bold mb-2 text-center">Sabor Maya</h2>
            <p className="text-center text-lg text-gray-600 mb-10">Cocina que Enamora</p>
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                {restaurantes.map(restaurant => (
                    <div key={restaurant.id} className="card bg-white rounded-xl shadow-lg overflow-hidden">
                        <img src={restaurant.image} alt={restaurant.name} className="w-full h-56 object-cover" />
                        <div className="p-6">
                            <h3 className="text-2xl font-bold mb-2">{restaurant.name}</h3>
                            <p className="text-gray-600 mb-4">{restaurant.specialty} - {restaurant.location}</p>
                            <div className="flex justify-end items-center">
                                <button onClick={() => onMenuClick(restaurant)} className="btn-secondary font-bold py-2 px-4 rounded-full">Ver Menú</button>
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
}

===== END frontend/src/pages/RestaurantesPage.js =====

===== BEGIN frontend/src/pages/TransportePage.js =====
// src/components/TransportePage.js

export default function TransportePage({ onSolicitarClick }) {
    return (
        <div className="container mx-auto px-6 py-16">
            <h2 className="text-4xl font-bold mb-2 text-center">Camino Maya</h2>
            <p className="text-center text-lg text-gray-600 mb-10">Tu Viaje, Seguro</p>
            <div className="card bg-gray-800 text-white rounded-xl shadow-lg overflow-hidden p-8 md:p-12 text-center max-w-2xl mx-auto">
                <svg className="w-24 h-24 mx-auto mb-4 text-theme-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
                <h3 className="text-3xl font-bold mb-4">Transporte Certificado</h3>
                <p className="mb-6">Conéctate con conductores locales verificados. Viaja con la tranquilidad que mereces.</p>
                <button 
                    onClick={onSolicitarClick} 
                    className="btn-secondary w-full max-w-xs mx-auto font-bold py-3 rounded-full"
                >
                    Solicitar un Viaje
                </button>
            </div>
        </div>
    );
}
===== END frontend/src/pages/TransportePage.js =====

===== BEGIN frontend/src/reportWebVitals.js =====
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

===== END frontend/src/reportWebVitals.js =====

===== BEGIN frontend/src/setupTests.js =====
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

===== END frontend/src/setupTests.js =====

===== BEGIN frontend/tailwind.config.js =====
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {
        colors: {
            'theme-primary': '#00a99d',
            'theme-secondary': '#ec008c',
            'theme-dark': '#1a202c',
            'theme-light': '#f7fafc',
        }
    },
  },
  plugins: [],
}

===== END frontend/tailwind.config.js =====
